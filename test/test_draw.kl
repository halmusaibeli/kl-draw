PROGRAM test_draw
%NOLOCKGROUP

%include draw.klt

VAR
  polygon1 : PATH nodedata = t_VERTEX
  polygon2 : PATH nodedata = t_VERTEX
  hull : PATH nodedata = t_VERTEX

%INCLUDE kunit.klh
%include draw.klh
%include draw.private.klh


ROUTINE clear_path(p : PATH nodedata = t_VERTEX)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_path

ROUTINE append_nodes(p : PATH nodedata = t_VERTEX; nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE path_to_arr(p : PATH nodedata = t_VERTEX; out_arr : ARRAY[*] OF VECTOR)
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(p) DO
      out_arr[i] = p[i].coords
    ENDFOR
  END path_to_arr

ROUTINE t_intersect : BOOLEAN
  VAR
    clipline : t_LINE2D
    clipseg : t_SEGMENT2D
    line1, line2, line3, line4 : t_LINE2D
    seg1, seg2, seg3, seg4 : t_SEGMENT2D
    alpha1, alpha2 : REAL
    intersects : ARRAY[4] OF BOOLEAN
    eval_alpha : ARRAY[4] OF BOOLEAN
  BEGIN
    clipline.point = VEC2D(-5,3)
    clipline.vec = VEC2D(10,-6)
    --eq of line p = p_0 + v*t
    clipseg.r0 = clipline.point + clipline.vec*0
    clipseg.r1 = clipline.point + clipline.vec*1

    --intersects at (0,0)
    line1.point = VEC2D(-10,-4)
    line1.vec = VEC2D(20,8)
    --convert into segment
    seg1.r0 = line1.point + line1.vec*0
    seg1.r1 = line1.point + line1.vec*1

    intersects[1] = draw__intersect(clipseg, seg1, alpha1, alpha2)
    eval_alpha[1] = kunit_eq_r(0.5, alpha1) AND kunit_eq_r(0.5, alpha2)

    --does not intersect
    line2.point = VEC2D(-5,-4)
    line2.vec = VEC2D(10,0)
    --convert into segment
    seg2.r0 = line2.point + line2.vec*0
    seg2.r1 = line2.point + line2.vec*1

    intersects[2] = draw__intersect(clipseg, seg2, alpha1, alpha2)

    --intersects at endpoints
    line3.point = VEC2D(-5,-5)
    line3.vec = VEC2D(10,2)
    --convert into segment
    seg3.r0 = line3.point + line3.vec*0
    seg3.r1 = line3.point + line3.vec*1

    intersects[3] = draw__intersect(clipseg, seg3, alpha1, alpha2)
    eval_alpha[3] = kunit_eq_r(1, alpha1) AND kunit_eq_r(1, alpha2)

    --intersects at 0.82
    line4.point = VEC2D(-5,-5)
    line4.vec = VEC2D(3,8)
    --convert into segment
    seg4.r0 = line4.point + line4.vec*0
    seg4.r1 = line4.point + line4.vec*1

    intersects[4] = draw__intersect(clipseg, seg4, alpha1, alpha2)
    eval_alpha[4] = kunit_eq_r(0.244, alpha1) AND kunit_eq_r(0.816, alpha2)


    RETURN(kunit_assert(intersects[1]) AND eval_alpha[1] AND &
           kunit_assert(intersects[3]) AND eval_alpha[3] AND &
           kunit_assert(intersects[4]) AND eval_alpha[4] AND &
           NOT kunit_assert(intersects[2]) )
  END t_intersect

ROUTINE t_anchr_pnts : BOOLEAN
  VAR
    i : INTEGER
    act_min, act_max : INTEGER
    exp_min, exp_max : INTEGER
    act_min2, act_max2 : INTEGER
    exp_min2, exp_max2 : INTEGER
  BEGIN
    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(1,4)
    polygon1[3].coords = VEC2D(3,4)
    polygon1[4].coords = VEC2D(1,3)
    polygon1[5].coords = VEC2D(2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(-2,0)
    polygon1[8].coords = VEC2D(-1,3)
    polygon1[9].coords = VEC2D(-1,4)
    polygon1[10].coords = VEC2D(-3,4)

    act_min = draw__find_min(polygon1, VEC2D(0,1))
    act_max = draw__find_max(polygon1, VEC2D(0,1))

    exp_min = 7 ; exp_max = 1

    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 6)
    polygon2[1].coords = VEC2D(3,0)
    polygon2[2].coords = VEC2D(5,4)
    polygon2[3].coords = VEC2D(9,4)
    polygon2[4].coords = VEC2D(9,-2)
    polygon2[5].coords = VEC2D(6,-3)
    polygon2[6].coords = VEC2D(6,0)

    act_min2 = draw__find_min(polygon2, VEC2D(0,1))
    act_max2 = draw__find_max(polygon2, VEC2D(0,1))

    exp_min2 = 5 ; exp_max2 = 3

    RETURN(kunit_eq_int(exp_min, act_min) AND kunit_eq_int(exp_max, act_max) AND &
           kunit_eq_int(exp_min2, act_min2) AND kunit_eq_int(exp_max2, act_max2))

  END t_anchr_pnts

ROUTINE t_convhull : BOOLEAN
  VAR
    exp_hull : ARRAY[6] OF VECTOR
    hull_arr : ARRAY[10] OF VECTOR
  BEGIN
    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(1,4)
    polygon1[3].coords = VEC2D(3,4)
    polygon1[4].coords = VEC2D(1,3)
    polygon1[5].coords = VEC2D(2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(-2,0)
    polygon1[8].coords = VEC2D(-1,3)
    polygon1[9].coords = VEC2D(-1,4)
    polygon1[10].coords = VEC2D(-3,4)

    --compute convex hull
    draw__convex_hull(polygon1, TRUE, hull)

    path_to_arr(hull, hull_arr)

    --expected hull
    exp_hull[1] = VEC2D(-2,0)
    exp_hull[2] = VEC2D(2,0)
    exp_hull[3] = VEC2D(3,4)
    exp_hull[4] = VEC2D(0,6)
    exp_hull[5] = VEC2D(-3,4)
    exp_hull[6] = VEC2D(-2,0)

    RETURN(kunit_eq_vec(exp_hull[1], hull_arr[1]) AND kunit_eq_vec(exp_hull[3], hull_arr[3]) AND &
           kunit_eq_vec(exp_hull[4], hull_arr[4]) AND kunit_eq_vec(exp_hull[6], hull_arr[6])  )

  END t_convhull

ROUTINE t_convhull_m : BOOLEAN
  VAR
    exp_hull : ARRAY[6] OF VECTOR
    hull_arr : ARRAY[10] OF VECTOR
  BEGIN
    --set polygon multiple bodies
    clear_path(polygon2)
    append_nodes(polygon2, 12)
    --square 1
    polygon2[1].coords = VEC2D(-8,3)
    polygon2[2].coords = VEC2D(-6,1.5)
    polygon2[3].coords = VEC2D(-3,5.5)
    polygon2[4].coords = VEC2D(-5,7)
    --square 2
    polygon2[5].coords = VEC2D(-4.17,0.13)
    polygon2[6].coords = VEC2D(0,-3)
    polygon2[7].coords = VEC2D(4.17,0.13)
    polygon2[8].coords = VEC2D(0,3.25)
    --square 3
    polygon2[9].coords = VEC2D(6,1.5)
    polygon2[10].coords = VEC2D(8,3)
    polygon2[11].coords = VEC2D(5,7)
    polygon2[12].coords = VEC2D(3,5.5)

    --compute convex hull
    draw__convex_hull(polygon2, TRUE, hull)

    path_to_arr(hull, hull_arr)

    --expected hull
    exp_hull[1] = VEC2D(0,-3)
    exp_hull[2] = VEC2D(8,3)
    exp_hull[3] = VEC2D(5,7)
    exp_hull[4] = VEC2D(-5,7)
    exp_hull[5] = VEC2D(8,3)
    exp_hull[6] = VEC2D(0,-3)

    RETURN(kunit_eq_vec(exp_hull[1], hull_arr[1]) AND kunit_eq_vec(exp_hull[3], hull_arr[3]) AND &
           kunit_eq_vec(exp_hull[4], hull_arr[4]) AND kunit_eq_vec(exp_hull[6], hull_arr[6]) )

  END t_convhull_m


ROUTINE t_bbox : BOOLEAN
  VAR
    act_box1 , act_box2 : t_RECT
    exp_box1 , exp_box2 : t_RECT
  BEGIN
    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 6)

    polygon2[1].coords = VEC2D(0.34,-1.38)
    polygon2[2].coords = VEC2D(3.24,-0.7)
    polygon2[3].coords = VEC2D(6.22,1.74)
    polygon2[4].coords = VEC2D(3.48,5.46)
    polygon2[5].coords = VEC2D(-1.02,3.3)
    polygon2[6].coords = VEC2D(-1.74,0.84)
    
    act_box1 = draw__bounding_box(polygon2, 0)

    exp_box1.verts[1] = VEC2D(-1.74,-1.38)
    exp_box1.verts[2] = VEC2D(6.22,-1.38)
    exp_box1.verts[3] = VEC2D(6.22,5.46)
    exp_box1.verts[4] = VEC2D(-1.74,5.46)

    exp_box1.center = VEC2D(2.24,2.04)

    act_box2 = draw__bounding_box(polygon2, -45)

    exp_box2.verts[1] = VEC2D(-2.68,1.64)
    exp_box2.verts[2] = VEC2D(1.72,-2.76)
    exp_box2.verts[3] = VEC2D(6.71,2.23)
    exp_box2.verts[4] = VEC2D(2.31,6.63)

    exp_box2.center = VEC2D(2.015,1.935)

    RETURN(kunit_eq_vec(exp_box1.verts[1], act_box1.verts[1]) AND kunit_eq_vec(exp_box1.verts[4], act_box1.verts[4]) AND &
           kunit_eq_vec(exp_box1.center, act_box1.center) AND &
           kunit_eq_vec(exp_box2.verts[1], act_box2.verts[1]) AND kunit_eq_vec(exp_box2.verts[4], act_box2.verts[4]) AND &
           kunit_eq_vec(exp_box2.center, act_box2.center) )
  END t_bbox



BEGIN
  --total asserts 28
  kunit_test('test line intersection', t_intersect) -- asserts 10 
  kunit_test('test finding min and max points in polygon', t_anchr_pnts) -- asserts 4
  kunit_test('test convex hull star shape', t_convhull) -- asserts 4
  kunit_test('test convex hull of multiple polygons', t_convhull_m) -- asserts 4
  kunit_test('test bounding box', t_bbox) -- asserts 6
  kunit_done
END test_draw