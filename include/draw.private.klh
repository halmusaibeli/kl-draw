%ifndef draw__private_h
%define draw__private_h

%include namespace.m

%define prog_name draw
%define prog_name_alias draw


declare_function(prog_name,find_min,prog_name_alias,fdmin)
ROUTINE draw__find_min(point_arr : PATH nodedata = t_VERTEX; strti : INTEGER ; endi : INTEGER ; &
                       center : VECTOR ; search_vec : VECTOR) : INTEGER FROM draw
declare_function(prog_name,find_max,prog_name_alias,fdmax)
ROUTINE draw__find_max(point_arr : PATH nodedata = t_VERTEX; strti : INTEGER ; endi : INTEGER ; & 
                       center : VECTOR ; search_vec : VECTOR) : INTEGER FROM draw
declare_function(prog_name,on_hull,prog_name_alias,onhul)
ROUTINE draw__on_hull(v : VECTOR ; hull : PATH nodedata = t_VERTEX) : BOOLEAN FROM draw
declare_function(prog_name,point_collision_convex,prog_name_alias,pcolc)
ROUTINE draw__point_collision_convex(v : VECTOR ; polygon : PATH nodedata = t_VERTEX; &
                                     start_node, end_node : INTEGER; on_boundary : BOOLEAN) : BOOLEAN FROM draw
declare_function(prog_name,point_avoid_convex,prog_name_alias,pavdc)
ROUTINE draw__point_avoid_convex(v : VECTOR ; polygon : PATH nodedata = t_VERTEX; & 
                                 start_node, end_node : INTEGER) : BOOLEAN FROM draw
declare_function(prog_name,clip_line_with_poly,prog_name_alias,clplp)
ROUTINE draw__clip_line_with_poly(line : t_SEGMENT2D; polygon : PATH nodedata = t_VERTEX; &
                        hull : PATH nodedata = t_VERTEX; out_lines : PATH nodedata = t_SEG2D_POLY) FROM draw
declare_function(prog_name,line_inset,prog_name_alias,lnins)
ROUTINE draw__line_inset(line1 : t_SEGMENT2D; line2 : t_SEGMENT2D; inset_amount : REAL; &
                         out_line1 : t_SEGMENT2D; out_line2 : t_SEGMENT2D) FROM draw
declare_function(prog_name,psuedo_center,prog_name_alias,psucn)
ROUTINE draw__psuedo_center(verticies : PATH nodedata = t_VERTEX) : VECTOR FROM draw
%endif --draw__private_h