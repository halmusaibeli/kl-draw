%ifndef draw_h
%define draw_h

%include namespace.m

%define prog_name draw
%define prog_name_alias draw

-- *** conversions ***
-- *******************

-- frame is the 2d drawing frame
declare_function(prog_name,vec_to_vec2d,prog_name_alias,cnvvec2)
ROUTINE draw__vec_to_vec2d(v : VECTOR; frame : XYZWPR) : VECTOR FROM draw
-- frame is the 2d drawing frame
declare_function(prog_name,vec2d_to_vec,prog_name_alias,cnvvec)
ROUTINE draw__vec2d_to_vec(v : VECTOR; frame : XYZWPR) : VECTOR FROM draw
declare_function(prog_name,vec2d_to_pos,prog_name_alias,cnvpos)
ROUTINE draw__vec2d_to_pos(v : VECTOR; frame : XYZWPR) : XYZWPR FROM draw
declare_function(prog_name,pos_to_vec2d,prog_name_alias,cnvps2)
ROUTINE draw__pos_to_vec2d(p : XYZWPR; frame : XYZWPR) : VECTOR FROM draw

declare_function(prog_name,perpendicular_vector,prog_name_alias,perpv)
ROUTINE draw__perpendicular_vector(v : VECTOR) : VECTOR FROM draw
declare_function(prog_name,angle_to_vector,prog_name_alias,angvc)
ROUTINE draw__angle_to_vector(angle : REAL) : VECTOR FROM draw
declare_function(prog_name,vector_to_angle,prog_name_alias,vecan)
ROUTINE draw__vector_to_angle(v : VECTOR) : REAL FROM draw

declare_function(prog_name,intersect,prog_name_alias,intsct)
-- alpha designates where the intersection point lies relative to the start point
-- as a ratio 0-1. Where alpha=0 would mean the intersection point is at the start point,
-- and alpha = 1 means the intersection point is at the end point.
--
-- the return type informs if the lines intersect or not.
ROUTINE draw__intersect(l1 : t_SEGMENT2D; l2 : t_SEGMENT2D; out_alpha1 : REAL; out_alpha2 : REAL) : BOOLEAN FROM draw

declare_function(prog_name,convex_hull,prog_name_alias,convh)
-- return list of points on the convex hull in counterclockwise order
ROUTINE draw__convex_hull(verticies : PATH nodedata = t_VERTEX; rmv_colinear : BOOLEAN; out_hull : PATH nodedata = t_VERTEX) FROM draw
declare_function(prog_name,bounding_box,prog_name_alias,bndbx)
ROUTINE draw__bounding_box(verticies : PATH nodedata = t_VERTEX; angle : REAL) : t_RECT FROM draw
declare_function(prog_name,clip_lines,prog_name_alias,clpll)
ROUTINE draw__clip_lines(line1 : t_SEGMENT2D; line2 : t_SEGMENT2D) FROM draw
declare_function(prog_name,point_collision_polygon,prog_name_alias,pcolp)
ROUTINE draw__point_collision_polygon(v : VECTOR ; polygon : PATH nodedata = t_VERTEX; hull : PATH nodedata = t_VERTEX) : BOOLEAN FROM draw
declare_function(prog_name,raster_lines,prog_name_alias,rstln)
ROUTINE draw__raster_lines(polygon : PATH nodedata = t_VERTEX; out_hull : PATH nodedata = t_VERTEX; raster_angle : REAL; line_width : REAL; line_pitch : REAL; dir : INTEGER ; on_boundary : BOOLEAN ; out_lines : PATH nodedata = t_SEG2D_POLY) FROM draw
declare_function(prog_name,inset_polygon,prog_name_alias,inset)
ROUTINE draw__inset_polygon(polygon : PATH nodedata = t_VERTEX; inset_amount : REAL; out_hull : PATH nodedata = t_VERTEX ; out_polygon : PATH nodedata = t_VERTEX) FROM draw
declare_function(prog_name,trace,prog_name_alias,trace)
--dir =1 ccw or =-1 cw
ROUTINE draw__trace(polygon : PATH nodedata = t_VERTEX; start_angle : REAL; dir : INTEGER ; curve_type : INTEGER ; out_contour : PATH nodedata = t_VEC_PATH) FROM draw
declare_function(prog_name,calc_tangent,prog_name_alias,caltg)
ROUTINE draw__calc_tangent(segment : PATH nodedata = t_VEC_PATH) FROM draw
declare_function(prog_name,hexagon,prog_name_alias,hexagon)
ROUTINE draw__hexagon(radius : REAL; verticies : INTEGER; origin : XYZWPR; out_poly : PATH nodedata = t_VERTEX) FROM draw

%endif --draw_h