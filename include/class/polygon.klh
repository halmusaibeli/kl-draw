--header
%include header_guard.m
--oop
%include namespace.m

--start header file
header_if -- ifndef class
header_def -- define class

declare_member(class_name,clear,class_name,clr)
ROUTINE clear FROM class_name
declare_member(class_name,set_canvas,class_name,scnv)
ROUTINE set_canvas(frm : XYZWPR) FROM class_name
declare_member(class_name,set_params,class_name,sprm)
ROUTINE set_params(start_angle : REAL; dir : INTEGER; wall_lines : INTEGER; &
                  line_width : REAL; line_pitch : REAL) FROM class_name
declare_member(class_name,get_params,class_name,gprm)
ROUTINE get_params : t_RASTER FROM class_name
declare_member(class_name,append_vertex,class_name,avrt)
ROUTINE append_vertex(vertex : VECTOR; polygon : INTEGER) FROM class_name
declare_member(class_name,append_polygon,class_name,aplp)
ROUTINE append_polygon(verticies : PATH nodedata = t_VERTEX) FROM class_name
declare_member(class_name,append_polygon_array,class_name,apla)
ROUTINE append_polygon_array(verticies : ARRAY[*] OF VECTOR) FROM class_name
declare_member(class_name,get_lines,class_name,glns)
ROUTINE get_lines(start_i : INTEGER; end_i : INTEGER; out_lines : PATH nodedata = t_SEGMENT2D) FROM class_name
declare_member(class_name,trace,class_name,trce)
ROUTINE trace FROM class_name
declare_member(class_name,raster,class_name,rast)
ROUTINE raster FROM class_name
declare_member(class_name,world_transform,class_name,wtrs)
ROUTINE world_transform(out_lines : PATH nodedata = t_SEGMENT) FROM class_name
declare_member(class_name,hexagon,class_name,hxgn)
ROUTINE hexagon(radius : REAL; verticies : INTEGER; translation : VECTOR; rotation : REAL) FROM class_name
%endif --end header