PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'canvas object'
%NOLOCKGROUP

--*** ..todo:: Does not work for polygons with holes

%include namespace.m

%include errors.klt
%include systemvars.klt
%include systemlib.types.klt
%include pathlib.c.klt
%include pathlib.t.klt
%include draw.klt

VAR
  canvas : PATH nodedata = t_VERTEX
  sub_poly : PATH nodedata = t_VERTEX
  inset_poly : PATH nodedata = t_VERTEX
  -- ..Note:: `sub_poly` maybe should be a seperate type without
  --          nextPoly, prevPoly, polygon, and include holes member list
  hull : PATH nodedata = t_VERTEX

  lines : PATH nodedata = t_SEG2D_POLY
  contours : PATH nodedata = t_VEC_PATH
  fl : FILE
  origin : XYZWPR
  poly_count : INTEGER
  params : t_RASTER
  -- toggle if you want to raster lines on the boundary of the shape
  -- if false it will exclude the boundary
  rast_bounds : BOOLEAN

  -- ..Note:: centroids are calculated in bounding box calculations
  --          check that bounding boxes are calculated per polygon,
  --          not whole drawing

%from systemlib.klh %import VEC, VEC2D
%from strings.klh %import s_to_vec
%from math.klh %import arclength, arcangle, norm, rotz
%from pose.klh %import vector_to_pose
%include csv.klh
%include errors.klh
%include draw.klh

%include canvas.klh
%include canvas.private.klh


-- ** private **

ROUTINE clear_hull
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(hull)
    WHILE PATH_LEN(hull) > 0 DO
		  DELETE_NODE(hull,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_hull

ROUTINE clear_poly
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE clear_lines
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(lines)
    WHILE PATH_LEN(lines) > 0 DO
		  DELETE_NODE(lines,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_lines

ROUTINE clear_vpath
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear_vpath

ROUTINE clear_members
  BEGIN
    --clear polys
    clear_poly(canvas)
    clear_poly(sub_poly)
    clear_poly(inset_poly)
    --clear hull
    clear_hull
    --clear lines
    clear_lines
    --clear contours
    clear_vpath(contours)
  END clear_members

ROUTINE get_sub_poly
  VAR
    nde_strt, nde_end : INTEGER
    i : INTEGER
    status : INTEGER
    idx : VECTOR2Di
  BEGIN
    nde_strt = 1; nde_end = PATH_LEN(canvas);
    --find polygon if more than one polygon is on canvas
    IF (poly_count > 1) THEN
      i = 1
      --find the correct polygon by looking at the current
      --polygons 'nextPoly' index, then jumping to that index
      --and checking the polygon number.
      --if it is the correct polygon update start and end index
      --and break out. Also if you are at the last polygon
      --'nextPoly' will be uninit, so break out, selecting
      --PATH_LEN and the end index.
      REPEAT
        nde_strt = i
        --handle uninitialized nextPoly
        IF UNINIT(canvas[i].nextPoly) THEN
          nde_end = PATH_LEN(canvas)
          GOTO BREAK_SUB
        ELSE
          nde_end = canvas[i].nextPoly - 1
          --get index of next polygon
        ENDIF
        
        i = canvas[i].nextPoly
      UNTIL(canvas[i].polygon > polygon)

      BREAK_SUB::
    ENDIF

    --clear to sub path
    clear_poly(sub_poly)
    --copy canvas window to sub_poly, which should only contain
    --the selected polygon
    COPY_PATH(canvas, nde_strt, nde_end, sub_poly, status)
    CHK_STAT(status)

    --return the start and end index for reference
    idx.x = nde_strt
    idx.y = nde_end

    RETURN(idx)

  END get_sub_poly

ROUTINE update_last_poly
  VAR
    i : INTEGER
    polygon : INTEGER
  BEGIN
    --append pointer to next polygon if other
    --polygons exist
    i = PATH_LEN(canvas)
    IF i > 0 THEN
      IF NOT UNINIT(canvas[i].polygon) THEN
        polygon = canvas[i].polygon + 1
      ELSE
        polygon = 1
      ENDIF
      
      WHILE (i > 0) DO
        IF UNINIT(canvas[i].nextPoly) THEN
          canvas[i].nextPoly = PATH_LEN(canvas) + 1
        ENDIF
        i = i - 1
      ENDWHILE
    ELSE
      polygon = 1
    ENDIF

    RETURN(polygon)
  END update_last_poly

-- ** public **

ROUTINE delete
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(canvas)
    WHILE PATH_LEN(canvas) > 0 DO
		  DELETE_NODE(canvas,i,status)
      i = i - 1
	  ENDWHILE
    --uninitialize the canvas
    SET_UNINIT_F('class_name', 'origin')

    rast_bounds = FALSE
    poly_count = 0

    clear_members
  END delete

ROUTINE new
%define DEFAULT_PITCH 3
  BEGIN
    delete
    set_canvas((ZEROPOS(1)))
    rast_bounds = TRUE
    poly_count = 0

    --set default params
    params.start_angle = 0
    params.line_width = 0
    params.line_pitch = DEFAULT_PITCH
    params.dir = 1
    params.wall_lines = 0
  END new

ROUTINE init
  BEGIN
    delete
    set_canvas(frm_)
    rast_bounds = boundary
    poly_count = 0
    
    --fill params
    params.start_angle = start_angle_
    params.dir = dir_
    params.wall_lines = wall_lines_
    params.line_width = line_width_
    params.line_pitch = line_pitch_
  END init

ROUTINE init2
  BEGIN
    delete
    set_canvas(frm_)
    rast_bounds = boundary
    poly_count = 0
    
    --fill params
    params.start_angle = rast.start_angle
    params.dir = rast.dir
    params.wall_lines = rast.wall_lines
    params.line_width = rast.line_width
    params.line_pitch = rast.line_pitch
  END init2

--clear the canvas, but keep the canvas
ROUTINE erase
  BEGIN
    clear_members
    poly_count = 0
  END erase

ROUTINE set_canvas
  BEGIN
    origin = frm_
  END set_canvas

ROUTINE flip_canvas
  VAR
    bbox : t_RECT
    len : REAL
  BEGIN
    --get length of the drawing, and translate by that length
    len = get_canvas_length
    origin = origin:POS(0,0,len,0,180,0,(ZEROPOS(1).config_data))
  END flip_canvas

ROUTINE raster_on_boundary
  BEGIN
    rast_bounds = boundary
  END raster_on_boundary

ROUTINE set_params
  BEGIN
    params.start_angle = start_angle
    params.dir = dir
    params.wall_lines = wall_lines
    params.line_width = line_width
    params.line_pitch = line_pitch
  END set_params

ROUTINE get_params
  BEGIN
    RETURN(params)
  END get_params

ROUTINE append_vertex
  VAR
    status : INTEGER
    nd : t_VERTEX
  BEGIN
    IF UNINIT(origin) THEN
      karelError(VAR_UNINIT,'class_name member "origin" needs to' + &
                ' be set before building polygons', ER_ABORT)
    ENDIF
    APPEND_NODE(canvas,status)
    CHK_STAT(status)
    nd.coords = VEC2D(vertex.x, vertex.y)
    nd.polygon = polygon
    canvas[PATH_LEN(canvas)] = nd
  END append_vertex

ROUTINE append_polygon
  VAR
    i : INTEGER
    polygon : INTEGER
    lastPoly : INTEGER
  BEGIN
    -- update nextPoly field in the previous polygon
    -- in anticiptation of a new appended polygon
    polygon = update_last_poly

    --retain last index to point to prevPoly
    IF PATH_LEN(canvas) > 0 THEN lastPoly = PATH_LEN(canvas); ENDIF

    FOR i=1 TO PATH_LEN(verticies) DO
      append_vertex(verticies[i].coords, (polygon))
      IF NOT UNINIT(lastPoly) AND (lastPoly > 0) THEN
        canvas[PATH_LEN(canvas)].prevPoly = lastPoly
      ENDIF
    ENDFOR

    --add polygon count
    poly_count = poly_count + 1

  END append_polygon

ROUTINE append_polygon_array
  VAR
    i : INTEGER
    polygon : INTEGER
    lastPoly : INTEGER
  BEGIN
    -- update nextPoly field in the previous polygon
    -- in anticiptation of a new appended polygon
    polygon = update_last_poly

    --retain last index to point to prevPoly
    IF PATH_LEN(canvas) > 0 THEN lastPoly = PATH_LEN(canvas); ENDIF

    FOR i=1 TO ARRAY_LEN(verticies) DO
      append_vertex(verticies[i], (polygon))
      IF NOT UNINIT(lastPoly) THEN
        canvas[PATH_LEN(canvas)].prevPoly = lastPoly
      ENDIF
    ENDFOR

    --add polygon count
    poly_count = poly_count + 1
    
  END append_polygon_array

ROUTINE get_poly
  VAR
    i, nd, status : INTEGER
  BEGIN
    IF polygon = 0 THEN
      COPY_PATH(canvas, 1, PATH_LEN(canvas), out_poly, status)
      CHK_STAT(status)
    ELSE
      nd = 1
      REPEAT
        i = nd
        IF UNINIT(canvas[i].nextPoly) THEN
          nd = PATH_LEN(canvas)
        ELSE
          nd = canvas[i].nextPoly
        ENDIF
      UNTIL(canvas[i].polygon = polygon)

      COPY_PATH(canvas, 1, nd, out_poly, status)
      CHK_STAT(status)
    ENDIF
  END get_poly 

ROUTINE get_lines
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(lines, start_i, end_i, out_lines, status)
    CHK_STAT(status)
  END get_lines

ROUTINE get_contours
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(contours, start_i, end_i, out_cntrs, status)
    CHK_STAT(status)
  END get_contours

ROUTINE get_bounding_box_drawing
  VAR
    bbox : t_RECT
  BEGIN
    bbox = draw__bounding_box(canvas, (params.start_angle))
    --convert to world coordinates
    RETURN(bbox)
  END get_bounding_box_drawing

ROUTINE get_bounding_box_poly
  VAR
    bbox : t_RECT
    idx : VECTOR2Di
  BEGIN
    --get individual polygon and store in `sub_poly`
    idx = get_sub_poly(polygon)
    bbox = draw__bounding_box(sub_poly, (params.start_angle))
    --convert to world coordinates
    RETURN(bbox)
  END get_bounding_box_poly

ROUTINE get_canvas_length
  VAR
    bbox : t_RECT
  BEGIN
    --get bounding box
    bbox = get_bounding_box_drawing

    -- get length of bounding box along its longitude
    RETURN(math__norm(bbox.verts[4]-bbox.verts[1]))
  END get_canvas_length

ROUTINE get_polygon_count
  BEGIN
    RETURN(poly_count)
  END get_polygon_count

ROUTINE calc_polygon_count
  BEGIN
    RETURN(canvas[PATH_LEN(canvas)].polygon)
  END calc_polygon_count

ROUTINE translate_canvas
  BEGIN
    origin = origin:POS(vec.x,vec.y,vec.z,0,0,0,(ZEROPOS(1).config_data))
  END translate_canvas

ROUTINE rotate_canvas
  BEGIN
    origin = origin:POS(0,0,0,vec.x,vec.y,vec.z,(ZEROPOS(1).config_data))
  END rotate_canvas

ROUTINE remove_polygon
  VAR
    i, status : INTEGER
    idx : VECTOR2Di
  BEGIN
    --get polygon start and end index
    idx = get_sub_poly(polyidx)
    
    --remove index range
    FOR i=idx.x TO idx.y DO
      --remove vertex from canvas
      DELETE_NODE(canvas,i,status)
      CHK_STAT(status)
    ENDFOR

    --recalc indicies
    draw__recalc_poly_indices(canvas)

    --clear subpoly
    clear_poly(sub_poly)
  END remove_polygon

ROUTINE replace_polygon
  VAR
    i, j, k, status : INTEGER
    idx : VECTOR2Di
  BEGIN
    --get polygon start and end index
    idx = get_sub_poly(polyidx)

    --replace polygon
    j = idx.x
    FOR i=1 TO PATH_LEN(polygon) DO
      --insert if new poly length is greater than previous poly length
      IF j > idx.y THEN
        --append if at the end of the canvas list
        IF j > PATH_LEN(canvas) THEN
          APPEND_NODE(canvas, status)
          CHK_STAT(status)
          canvas[j] = polygon[i]
        --insert into canvas
        ELSE
          INSERT_NODE(canvas, j, status)
          CHK_STAT(status)
          canvas[j] = polygon[i]
        ENDIF
      --replace existing node
      ELSE
        canvas[j] = polygon[i]
      ENDIF

      j = j + 1
    ENDFOR

    -- remove extra verticies
    j = j-1 -- i loop add extra j at end
    IF (j < idx.y) THEN
      FOR k=1 TO (idx.y-j) DO
        --remove old verticies from canvas
        DELETE_NODE(canvas,j+1,status)
        CHK_STAT(status)
      ENDFOR
    ENDIF

    --recalc indicies
    draw__recalc_poly_indices(canvas)

  END replace_polygon

ROUTINE rotate_polygons
  VAR
    i : INTEGER
    idx : VECTOR2Di
  BEGIN
    --rotate every polygon on the canvas if set to zero
    IF start_poly <= 0 THEN
      start_poly = 1
    ENDIF

    IF end_poly <= 0 THEN
      end_poly = poly_count
    ENDIF

    --rotate each polygon seperately about its center
    FOR i=start_poly TO end_poly DO
      --clear inset poly to store rotated polygon
      clear_poly(inset_poly)

      --get isolated polygon in sub_poly
        -- idx.x = start index, idx.y = end index
      idx = get_sub_poly(i)

      --rotate polygon
      draw__rotate_polygon(sub_poly, angle, inset_poly)

      --replace on canvas
      replace_polygon(i, inset_poly)
    ENDFOR
  END rotate_polygons

ROUTINE scale_polygons
  --factor should be between in mm for the x and y axis.
  --will calculate the distance to each axis and scale
  --down to that axis depending on the fraction.
  VAR
    i : INTEGER
    idx : VECTOR2Di
  BEGIN
    -- ..Note:: `params.start_angle` must be set before running canvas
    --           function

    --rotate every polygon on the canvas if set to zero
    IF start_poly <= 0 THEN
      start_poly = 1
    ENDIF

    IF end_poly <= 0 THEN
      end_poly = poly_count
    ENDIF

    --scale each polygon seperately about its center
    FOR i=start_poly TO end_poly DO
      --clear inset poly to store scaled poly
      clear_poly(inset_poly)

      --get isolated polygon in sub_poly
        -- idx.x = start index, idx.y = end index
      idx = get_sub_poly(i)

      --scale polygon
      draw__scale_polygon(sub_poly, (params.start_angle), scale_x, scale_y, inset_poly)

      --replace on canvas
      replace_polygon(i, inset_poly)
    ENDFOR

  END scale_polygons

ROUTINE inset_polygons
  VAR
    i : INTEGER
    idx : VECTOR2Di
  BEGIN
    -- ..Note:: `params.start_angle` must be set before running canvas
    --           function

    --rotate every polygon on the canvas if set to zero
    IF start_poly <= 0 THEN
      start_poly = 1
    ENDIF

    IF end_poly <= 0 THEN
      end_poly = poly_count
    ENDIF

    --scale each polygon seperately about its center
    FOR i=start_poly TO end_poly DO
      --clear inset poly to store scaled poly
      clear_poly(inset_poly)

      --get isolated polygon in sub_poly
        -- idx.x = start index, idx.y = end index
      idx = get_sub_poly(i)

      --inset polygon by amount
      draw__inset_polygon(sub_poly, dist, hull, inset_poly)

      --replace on canvas
      replace_polygon(i, inset_poly)
    ENDFOR

  END inset_polygons

ROUTINE inset_canvas
  VAR
    i : INTEGER
    idx : VECTOR2Di
  BEGIN
    --clear inset poly to store scaled poly
    clear_poly(inset_poly)

    --scale each polygon seperately about its center
    FOR i=1 TO poly_count DO

      --get isolated polygon in sub_poly
        -- idx.x = start index, idx.y = end index
      idx = get_sub_poly(i)

      --inset polygon by amount
      draw__inset_polygon(sub_poly, dist, hull, inset_poly)
      
    ENDFOR

  END inset_canvas


ROUTINE trace
  VAR
    i, j : INTEGER
    idx : VECTOR2Di
  BEGIN
    --clear previous contours
    clear_vpath(contours)

    --get walls
    i = 0
    WHILE (i < params.wall_lines) DO

      --loop through each polygon on canvas
      FOR j=1 TO poly_count DO
        --get isolated polygon in sub_poly
        -- idx.x = start index, idx.y = end index
        idx = get_sub_poly(j)

        --clear inset
        clear_poly(inset_poly)

        --inset by width of line to fill within boundaries
        --inset and trace each polygon on the canvas
        --`insetpoly` gets cleared in inset_polygon
        draw__inset_polygon(sub_poly, (params.line_width/2 + i*params.line_pitch), hull, inset_poly)

        --trace polygon
        draw__trace(inset_poly, params.start_angle, (params.dir), line_type, contours)
      ENDFOR

      i = i + 1
    ENDWHILE

    --calculate tangent vectors
    draw__calc_tangent(contours)

  END trace

ROUTINE raster
  VAR
    i, status : INTEGER
  BEGIN
    clear_lines

    --only raster over what is left after inset
    IF (params.wall_lines > 0) OR (params.line_width > 0) THEN
      --..NOTE:: using inset_canvas will retain the original polygons as
      --         it does not override 'canvas'

      --inset by total number of wall lines
      inset_canvas((params.line_width/2 + (params.wall_lines-1)*params.line_pitch))
      --raster over inset canvas
      draw__raster_lines(inset_poly, hull, params.start_angle, params.line_width, params.line_pitch, (params.dir), rast_bounds, lines)
    ELSE
      --just raster over original canvas
      draw__raster_lines(canvas, hull, params.start_angle, params.line_width, params.line_pitch, (params.dir), rast_bounds, lines)
    ENDIF

  END raster

ROUTINE lines_to_vec_path
  VAR
    i : INTEGER
    status : INTEGER
    prev_vert, curr_vert, next_vert : INTEGER
  BEGIN
    IF UNINIT(origin) THEN
      karelError(VAR_UNINIT,'class_name member "origin" needs to' + &
                ' be set before converting', ER_ABORT)
    ENDIF

    --convert lines
    FOR i=1 TO PATH_LEN(lines) DO
      --r0
      APPEND_NODE(out_lines, status)
      out_lines[PATH_LEN(out_lines)].v = origin:lines[i].r0
      out_lines[PATH_LEN(out_lines)].code = PTH_MOVETO
      out_lines[PATH_LEN(out_lines)].polygon = lines[i].polygon
      out_lines[PATH_LEN(out_lines)].tangent = origin:lines[i].tangent

      --r1
      APPEND_NODE(out_lines, status)
      out_lines[PATH_LEN(out_lines)].v = origin:lines[i].r1
      out_lines[PATH_LEN(out_lines)].code = PTH_CLOSE
      out_lines[PATH_LEN(out_lines)].polygon = lines[i].polygon
      out_lines[PATH_LEN(out_lines)].tangent = origin:lines[i].tangent
    ENDFOR
  END lines_to_vec_path

ROUTINE contours_to_vec_path
  VAR
    i, status : INTEGER
    next_vert,prev_vert : INTEGER
  BEGIN
    IF UNINIT(origin) THEN
      karelError(VAR_UNINIT,'class_name member "origin" needs to' + &
                ' be set before converting', ER_ABORT)
    ENDIF

    --convert contours
    FOR i=1 TO PATH_LEN(contours) DO
      APPEND_NODE(out_cntrs, status)
      out_cntrs[PATH_LEN(out_cntrs)].v = origin:contours[i].v
      out_cntrs[PATH_LEN(out_cntrs)].code = contours[i].code
      out_cntrs[PATH_LEN(out_cntrs)].polygon = contours[i].polygon
      out_cntrs[PATH_LEN(out_cntrs)].tangent = origin:contours[i].tangent
    ENDFOR

  END contours_to_vec_path

  BEGIN
  END class_name
