PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'pathdraw'
%NOLOCKGROUP

%include namespace.m

%include systemlib.types.klt
%include systemvars.klt
%include pose.const.klt
%include draw.klt
%include pathlib.klt
%include toolpath.structs.klt
%include pathdraw.deps.klt

%define BASE_CLASSNAME class_name

VAR
  bbox : t_RECT
  origin : XYZWPR
  rastparam : t_RASTER
  onBoundary : BOOLEAN
  flipCanvas : BOOLEAN
  polygon : PATH nodedata = t_VERTEX
  copyPoly : PATH nodedata = t_VERTEX
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH

%from systemlib.klh %import VEC, VEC2D
%from errors.klh %import SET_UNINIT_F
%from math.klh %import norm
%from pose.klh %import set_config
%include pathlib.klh

--define objects
  --polygon
draw_object_define(DRAW_OBJECT_NAME)

%defeval class_name BASE_CLASSNAME

%include pathdraw.klh
%include pathdraw.private.klh

--private

ROUTINE clear_poly
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE allocate_poly
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO size DO
      APPEND_NODE(polygon, status)
    ENDFOR
  END allocate_poly

ROUTINE set_raster_params
  BEGIN
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    `DRAW_OBJECT_NAME`__set_params((rastprm.angle), (rastprm.dir), (rastprm.contours), & 
                                   (rastprm.line_width), (rastprm.overlap) )
  END set_raster_params

--public

ROUTINE init
  BEGIN
    --clear polygon container
    clear_poly(polygon)
    clear_poly(copyPoly)

    --set drawing frame
    origin = frm

    --copy raster parameters
    onBoundary = rastprm_.onBoundary
    rastparam.start_angle = rastprm_.angle
    rastparam.dir = rastprm_.dir
    rastparam.wall_lines = rastprm_.contours
    rastparam.line_width = rastprm_.line_width
    rastparam.line_pitch = rastprm_.overlap
    
    --mark if drawing needs to be flipped
    flipCanvas = flipCanvas_

    --initialize polygon object
      --( frm, onboundary, start_angle, dir, wall_lines, line_width, line_pitch )
    `DRAW_OBJECT_NAME`__init2(origin, onBoundary, rastparam)

  END init

ROUTINE delete
  VAR
    uninitbb : t_RECT
    uninitrast : t_RASTER
  BEGIN
    --clear wrapper members
    paths__clear_vecpath(contours)
    paths__clear_vecpath(lines)
    --clear polygon containers
    clear_poly(polygon)
    clear_poly(copyPoly)
    
    --clear draw object
    `DRAW_OBJECT_NAME`__delete

    --uninitialize members
    bbox = uninitbb
    rastparam = uninitrast
    onBoundary = FALSE
    flipCanvas = FALSE
    SET_UNINIT_F('class_name', 'origin')
  END delete

ROUTINE set_origin
  BEGIN
    origin = frm
    `DRAW_OBJECT_NAME`__set_canvas(origin)
  END set_origin

ROUTINE get_length
  BEGIN
    --get bounding box
    bbox = `DRAW_OBJECT_NAME`__get_bounding_box_drawing

    -- get length of bounding box along its longitude
    RETURN(math__norm(bbox.verts[4]-bbox.verts[1]))

  END get_length

ROUTINE flip_origin
  VAR
    len : REAL
  BEGIN
    --get length of the drawing, and translate by that length
    len = get_length
    origin = origin:POS(0,0,len,0,180,0,(ZEROPOS(1).config_data))
    `DRAW_OBJECT_NAME`__set_canvas(origin)
  END flip_origin

ROUTINE get_lines
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(lines, 0, 0, out_lines, status)
  END get_lines

ROUTINE get_contours
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(contours, 0, 0, out_contour, status)
  END get_contours

ROUTINE translate_canvas
  BEGIN
    origin = origin:POS(vec.x,vec.y,vec.z,0,0,0,(ZEROPOS(1).config_data))
    `DRAW_OBJECT_NAME`__set_canvas(origin)
  END translate_canvas

ROUTINE rotate_canvas
  BEGIN
    -- rotation of W,P angles must be in a canvas wide basis
    -- for planar slicing.
    origin = origin:POS(0,0,0,vec.x,vec.y,0,(ZEROPOS(1).config_data))
    `DRAW_OBJECT_NAME`__set_canvas(origin)

  END rotate_canvas

ROUTINE copy
  VAR
    i, j, k : INTEGER
    status : INTEGER
  BEGIN
    IF (instances1 < 1) THEN instances1 = 1 ; ENDIF
    IF (instances2 < 1) THEN instances2 = 1 ; ENDIF
    
    FOR k=0 TO (instances2-1) DO
      --copy instances1
      FOR j=0 TO (instances1-1) DO
        --do not instance for first cycle assume that has already
        --been appended into the canvas
        IF ((j > 0) OR (k > 0)) THEN
          --clear copy container
          clear_poly(copyPoly)

          FOR i=1 TO PATH_LEN(polygon) DO
            APPEND_NODE(copyPoly, status)
            copyPoly[i].coords = polygon[i].coords + j*direction1 + k*direction2
          ENDFOR

          --append into polygon object to create drawing
          `DRAW_OBJECT_NAME`__append_polygon(copyPoly)
        ENDIF
      ENDFOR
    ENDFOR
  END copy

ROUTINE raster
  BEGIN
    --get raster lines
    `DRAW_OBJECT_NAME`__raster(PTH_LINETO)

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    
    --get lines from object
    `DRAW_OBJECT_NAME`__lines_to_vec_path(lines) ;
    `DRAW_OBJECT_NAME`__contours_to_vec_path(contours) ;

  END raster

ROUTINE drawPad
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__init(origin, (rastprm.onBoundary))
    `DRAW_OBJECT_NAME`__pads(padprm.width, padprm.length, padprm.separation, padprm.no_of_pads, VEC2D(0,0))
    
    --need to do before getting boudning box
    set_raster_params(rastprm)

    get_bounding_box

  END drawPad

ROUTINE drawHex
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__init(origin, (rastprm.onBoundary))
    `DRAW_OBJECT_NAME`__hexagon((hexprm.radius), (hexprm.points), VEC2D(0, 0), (polyprm.polyRotation))
    
    --need to do before getting boudning box
    set_raster_params(rastprm)

    get_bounding_box

  END drawHex

ROUTINE drawCustom
  VAR
    p : XYZWPR
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__init(origin, (rastprm.onBoundary))
    `DRAW_OBJECT_NAME`__import_shape('FR:\' + filename + '.csv')

    --need to do before getting boudning box
    set_raster_params(rastprm)
    
    get_bounding_box

  END drawCustom

BEGIN
END class_name