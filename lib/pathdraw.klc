PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'pathdraw'
%NOLOCKGROUP

%include namespace.m

%include systemlib.klt
%include systemvars.klt
%include pose.const.klt
%include draw.klt
%include pathlib.klt
%include toolpath.structs.klt
%include pathdraw.deps.klt

%define BASE_CLASSNAME class_name

VAR
  bbox : t_RECT
  origin : XYZWPR
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH

%from systemlib.klh %import VEC, VEC2D
%from errors.klh %import SET_UNINIT_F
%from math.klh %import norm
%from pose.klh %import set_config
%include pathlib.klh

--define objects
  --polygon
draw_object_define(DRAW_OBJECT_NAME,CONFIG_FILENAME)

%defeval class_name BASE_CLASSNAME

%include pathdraw.klh
%include pathdraw.private.klh

--private

ROUTINE raster
  BEGIN
    --get raster lines
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    `DRAW_OBJECT_NAME`__set_params((rastprm.angle), (rastprm.dir), (rastprm.contours), & 
                                   (rastprm.line_width), (rastprm.overlap) )
    `DRAW_OBJECT_NAME`__raster(PTH_LINETO)

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    
    --get lines from object
    `DRAW_OBJECT_NAME`__lines_to_vec_path(lines) ;
    `DRAW_OBJECT_NAME`__contours_to_vec_path(contours) ;
    --get bounding box
    bbox = `DRAW_OBJECT_NAME`__get_bounding_box

  END raster

--public

ROUTINE init
  BEGIN
    set_origin(idod, coordSys, length, rotation)
  END init

ROUTINE delete
  VAR
    uninitbb : t_RECT
  BEGIN
    --clear wrapper members
    paths__clear_vecpath(contours)
    paths__clear_vecpath(lines)
    
    --clear draw object
    `DRAW_OBJECT_NAME`__delete

    --uninitialize members
    bbox = uninitbb
    SET_UNINIT_F('class_name', 'origin')
  END delete

ROUTINE set_origin
  BEGIN
    -- for cylindrical systems the drawing will be mirrored
    -- on the OD. Rotate drawing in order invert the mirroring
    IF (idod = 1) AND (coordSys = PTH_CYLINDER) THEN
      origin = POS(0,0,length,0,180,rotation,(ZEROPOS(1).config_data))
    ELSE
      origin = POS(0,0,0,0,0,rotation,(ZEROPOS(1).config_data))
    ENDIF
  END set_origin

ROUTINE get_lines
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(lines, 0, 0, out_lines, status)
  END get_lines

ROUTINE get_contours
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(contours, 0, 0, out_contour, status)
  END get_contours


ROUTINE drawPad
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__init((ZEROPOS(1)), (rastprm.onBoundary))
    `DRAW_OBJECT_NAME`__pads(padprm.width, padprm.length, padprm.separation, padprm.no_of_pads, VEC2D(0,0))

    --raster shape
    raster(rastprm)

  END drawPad

ROUTINE drawHex
  BEGIN
    --draw pads
    `DRAW_OBJECT_NAME`__init((ZEROPOS(1)), (rastprm.onBoundary))
    `DRAW_OBJECT_NAME`__hexagon((hexprm.radius), (hexprm.points), VEC2D(0, 0), (polyprm.polyRotation))

    --raster shape
    raster(rastprm)

  END drawHex

ROUTINE drawCustom
  VAR
    p : XYZWPR
  BEGIN

    --draw pads
    `DRAW_OBJECT_NAME`__init((ZEROPOS(1)), (rastprm.onBoundary))
    --apply polygon z-rotation to input frame
    p = poly_frame:POS(0,0,0,0,0,(polyprm.polyRotation),poly_frame.Config_data)
    `DRAW_OBJECT_NAME`__set_canvas(p)
    `DRAW_OBJECT_NAME`__import_shape('FR:\' + filename + '.csv')

    --raster shape
    raster(rastprm)

  END drawCustom

BEGIN
END class_name