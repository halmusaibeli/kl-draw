PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'polygon object'
%NOLOCKGROUP

%include namespace.m

%ifeq INCLUDE_LAYOUT FALSE
%undef INCLUDE_LAYOUT
%endif

%ifeq DEBUG_BUILD FALSE
%undef DEBUG_BUILD
%endif

%ifdef DEBUG_BUILD
%include display.c.klt
%endif


%include systemlib.types.klt
%include systemvars.klt
%include pose.const.klt
%include draw.klt
%include pathlib.klt
%include toolpath.structs.klt
%include polygon.deps.klt

%ifdef INCLUDE_LAYOUT
--define layout struct
layout_type
%endif

%define BASE_CLASSNAME class_name

VAR
  bbox : t_RECT
  rastparam : t_RASTER
  onBoundary : BOOLEAN
  flipCanvas : BOOLEAN
  polygon : PATH nodedata = t_VERTEX
  transPoly : PATH nodedata = t_VERTEX
  copyPoly : PATH nodedata = t_VERTEX
  hull : PATH nodedata = t_VERTEX

  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH

%ifdef INCLUDE_LAYOUT
-- include reference to layout "buffer".
%include layout.friends.klt
layout_friends(LAYOUT_OBJECT_NAME,LAYOUT_STRUCT)
%endif

%from systemlib.klh %import VEC, VEC2D
%from errors.klh %import SET_UNINIT_F
%from math.klh %import norm
%from pose.klh %import set_config
%from draw.klh %import bounding_box, recalc_poly_indices, rotate_polygon, scale_polygon, inset_polygon, hexagon
%include pathlib.klh %import clear_toolpath, new_coord_sys, new_tool_params

--define objects
  --polygon
canvas_object_define(CANVAS_OBJECT_NAME)

%ifdef INCLUDE_LAYOUT
--define layout object
define_layout(LAYOUT_OBJECT_NAME,LAYOUT_CONFIG_FILENAME)
%endif

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

%defeval class_name BASE_CLASSNAME

%include polygon.klh
%include polygon.private.klh

%ifdef INCLUDE_LAYOUT
--implement polygon template headers
buffer_header(class_name)
%endif

--private

ROUTINE clear_poly
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE allocate_poly
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO size DO
      APPEND_NODE(polygon, status)
    ENDFOR
  END allocate_poly

ROUTINE set_raster_params
  BEGIN
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    `CANVAS_OBJECT_NAME`__set_params((rastprm.angle), (rastprm.dir), (rastprm.contours), & 
                                   (rastprm.line_width), (rastprm.overlap) )
  END set_raster_params

%ifdef INCLUDE_LAYOUT

ROUTINE import_layout
  BEGIN

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, '** importing file **')
%endif

    `LAYOUT_OBJECT_NAME`__new(filename)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, filename + ' loaded.')
%endif

  END import_layout

ROUTINE open_layout
  VAR
    i : INTEGER
    eof : BOOLEAN
  BEGIN
    `LAYOUT_OBJECT_NAME`__openfile
  
%ifdef DEBUG_BUILD
    usrdis__print(INFO, '-- class_name opened layout file --')
%endif
  END open_layout

ROUTINE close_layout
  BEGIN
    `LAYOUT_OBJECT_NAME`__closefile

%ifdef DEBUG_BUILD
    usrdis__print(INFO, '-- class_name closed layout file --')
%endif
  END close_layout


--implement polygon template members
impl_buffer_conversion

%endif


--public

ROUTINE init
  BEGIN
    --clear polygon container
    clear_poly(polygon)
    clear_poly(copyPoly)
    clear_poly(transPoly)
    clear_poly(hull)

    --copy raster parameters
    onBoundary = rastprm_.onBoundary
    rastparam.start_angle = rastprm_.angle
    rastparam.dir = rastprm_.dir
    rastparam.wall_lines = rastprm_.contours
    rastparam.line_width = rastprm_.line_width
    rastparam.line_pitch = rastprm_.overlap

    --initialize polygon object
      --( frm, onboundary, start_angle, dir, wall_lines, line_width, line_pitch )
    `CANVAS_OBJECT_NAME`__init2(frm, onBoundary, rastparam)

    --mark if drawing needs to be flipped
    flipCanvas = flipCanvas_

    --flip canvas if specified
    IF flipCanvas THEN
      `CANVAS_OBJECT_NAME`__flip_canvas
    ENDIF

  END init

ROUTINE delete
  VAR
    uninitbb : t_RECT
    uninitrast : t_RASTER
  BEGIN
    --clear wrapper members
    paths__clear_vecpath(contours)
    paths__clear_vecpath(lines)
    --clear polygon containers
    clear_poly(polygon)
    clear_poly(copyPoly)
    clear_poly(transPoly)
    clear_poly(hull)
    
    --clear draw object
    `CANVAS_OBJECT_NAME`__delete

%ifdef INCLUDE_LAYOUT
    --layout delete
    `LAYOUT_OBJECT_NAME`__delete
%endif

    --uninitialize members
    bbox = uninitbb
    rastparam = uninitrast
    onBoundary = FALSE
    flipCanvas = FALSE
  END delete

ROUTINE get_length
  BEGIN
    --get bounding box
    bbox = draw__bounding_box(polygon, (rastparam.start_angle))

    -- get length of bounding box along its longitude
    RETURN(math__norm(bbox.verts[4]-bbox.verts[1]))

  END get_length

ROUTINE get_lines
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(lines, 0, 0, out_lines, status)
  END get_lines

ROUTINE get_contours
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(contours, 0, 0, out_contour, status)
  END get_contours

ROUTINE rotate
  BEGIN
    clear_poly(transPoly)

    --rotate polygon
    draw__rotate_polygon(polygon, rotation, transPoly)

    IF addToCanvas THEN
      `CANVAS_OBJECT_NAME`__append_polygon(transPoly)
    ENDIF

    IF copyRot THEN
      IF (padprm.no_of_pads > 1) AND (padprm.separation > 0) THEN
        --copy to create pad array
        copy(transPoly, VEC2D(padprm.separation, 0), (padprm.no_of_pads), VEC2D(0, 0), 0, addToCanvas)
      ENDIF
    ENDIF

  END rotate

ROUTINE scale
  BEGIN
    clear_poly(transPoly)

    --scale polygon
    draw__scale_polygon(polygon, (rastparam.start_angle), scale_x, scale_y, transPoly)

    IF addToCanvas THEN
      `CANVAS_OBJECT_NAME`__append_polygon(transPoly)
    ENDIF

    IF copyRot THEN
      IF (padprm.no_of_pads > 1) AND (padprm.separation > 0) THEN
        --copy to create pad array
        copy(transPoly, VEC2D(padprm.separation, 0), (padprm.no_of_pads), VEC2D(0, 0), 0, addToCanvas)
      ENDIF
    ENDIF

  END scale

ROUTINE inset
  BEGIN
    clear_poly(transPoly)
    clear_poly(hull)

    --inset polygon by amount
    draw__inset_polygon(polygon, dist, hull, transPoly)

    IF addToCanvas THEN
      `CANVAS_OBJECT_NAME`__append_polygon(transPoly)
    ENDIF

    IF copyRot THEN
      IF (padprm.no_of_pads > 1) AND (padprm.separation > 0) THEN
        --copy to create pad array
        copy(transPoly, VEC2D(padprm.separation, 0), (padprm.no_of_pads), VEC2D(0, 0), 0, addToCanvas)
      ENDIF
    ENDIF

  END inset

ROUTINE copy
  VAR
    i, j, k : INTEGER
    status : INTEGER
    polycount : INTEGER
  BEGIN
    IF (instances1 < 1) THEN instances1 = 1 ; ENDIF
    IF (instances2 < 1) THEN instances2 = 1 ; ENDIF

    --clear copy container
    clear_poly(copyPoly)

    --assume 1st polygon is filled, so starting on polygon 2
    polycount = 2
    
    FOR k=0 TO (instances2-1) DO
      --copy instances1
      FOR j=0 TO (instances1-1) DO
        --do not instance for first cycle assume that has already
        --been appended into the canvas
        IF ((j > 0) OR (k > 0)) THEN

          FOR i=1 TO PATH_LEN(originalPoly) DO
            APPEND_NODE(copyPoly, status)
            copyPoly[i].coords = originalPoly[i].coords + j*direction1 + k*direction2
            copyPoly[i].polygon = polycount
          ENDFOR

          IF addToCanvas THEN
            --append into polygon object to create drawing
            `CANVAS_OBJECT_NAME`__append_polygon(copyPoly)
            --purge copy container as it has already been added to the canvas
            --and will duplicate in canvas during 'append_polygon' if not purged
            clear_poly(copyPoly)
          ENDIF

          --increment polycount
          polycount = polycount + 1
        ENDIF
      ENDFOR
    ENDFOR
    
    --recalc indicies if multiple polygons exist in copyPoly
    draw__recalc_poly_indices(copyPoly)
  END copy


ROUTINE makePad
  BEGIN

    clear_poly(polygon)
    allocate_poly(4)

    polygon[1].coords = start
    polygon[2].coords = start + VEC2D(padprm.width,0)
    polygon[3].coords = start + VEC2D(padprm.width,padprm.length)
    polygon[4].coords = start + VEC2D(0,padprm.length)

    IF addToCanvas THEN
      `CANVAS_OBJECT_NAME`__append_polygon(polygon)
    ENDIF

    IF (padprm.no_of_pads > 1) AND (padprm.separation > 0) THEN
      --copy to create pad array
      copy(polygon, VEC2D(padprm.separation, 0), (padprm.no_of_pads), VEC2D(0, 0), 0, addToCanvas)
    ENDIF

  END makePad

ROUTINE makeHex
  VAR
    centerfrm : XYZWPR
  BEGIN    
    --set center
      -- ..note:: previously polygon rotation was set here in `r`
    centerfrm = POS(center.x,center.y,center.z,0,0,0,(ZEROPOS(1).Config_data))

    clear_poly(polygon)
    --draw hexagon
    draw__hexagon((hexprm.radius), (hexprm.points), centerfrm, polygon)

    IF addToCanvas THEN
      `CANVAS_OBJECT_NAME`__append_polygon(polygon)
    ENDIF
    
    IF (padprm.no_of_pads > 1) AND (padprm.separation > 0) THEN
      --copy to create pad array
      copy(polygon, VEC2D(padprm.separation, 0), (padprm.no_of_pads), VEC2D(0, 0), 0, addToCanvas)
    ENDIF
  END makeHex

%ifdef INCLUDE_LAYOUT

ROUTINE makeCustom
  VAR
    eof : BOOLEAN
  BEGIN
    --load file
    import_layout(filename)

    open_layout

    eof = FALSE
    WHILE NOT eof DO
      -- load next polygon into `buffer` attribute
      eof = `LAYOUT_OBJECT_NAME`__loadBuffer

      --load polygon
      layout_to_poly(polygon)
    
      --draw polygon onto canvas
      IF addToCanvas THEN
        `CANVAS_OBJECT_NAME`__append_polygon(polygon)
      ENDIF

      IF (padprm.no_of_pads > 1) AND (padprm.separation > 0) THEN
        --copy to create pad array
        copy(polygon, VEC2D(padprm.separation, 0), (padprm.no_of_pads), VEC2D(0, 0), 0, addToCanvas)
      ENDIF

    ENDWHILE

    close_layout

  END makeCustom

%endif

ROUTINE draw
  BEGIN
    --get bounding box of drawing
    -- to select start corner for pathplanning
    bbox = `CANVAS_OBJECT_NAME`__get_bounding_box_drawing

    -- raster lines AND/OR draw contours
     -- result gets stored in `lines` and `contours` members

    --only raster if defined
    IF (doRaster) THEN
      --clear raster lines
      paths__clear_vecpath(lines) ;
      --get raster lines
      `CANVAS_OBJECT_NAME`__raster(PTH_LINETO)
      --get lines from canvas
      `CANVAS_OBJECT_NAME`__lines_to_vec_path(lines)
    ENDIF

    --only trace if number of contours are selected
    IF (rastparam.wall_lines > 0) THEN
      --clear contours
      paths__clear_vecpath(contours)
      --calculate traces/contours
      `CANVAS_OBJECT_NAME`__trace(PTH_LINETO)
      --get contours from object
      `CANVAS_OBJECT_NAME`__contours_to_vec_path(contours) ;
    ENDIF

  END draw

BEGIN
END class_name