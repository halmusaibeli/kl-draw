PROGRAM draw
%NOBUSYLAMP
%COMMENT = '2d library'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR
%STACKSIZE = 600

%ifdef DEBUG_BUILD
%include display.c.klt
%endif

%include errors.klt
%include systemvars.klt
%include systemlib.types.klt
%include math.klt
%include pathlib.t.klt
%include pathlib.c.klt
%include shapes.klt
%include draw.klt
%include draw.c.klt

--CONST
-- ..warning:: seems to effects rastering depending on scale.
--             *** IF HAVING ISSUES WITH RASTER LINES CHANGE
--             *** THIS VARIABLE TO REFLECT SCALE
%define epsilon 0.01

VAR
  reflex_verts :  PATH nodedata = t_INTEGER

%from errors.klh %import CHK_STAT, karelError
%include systemlib.klh
%include math.klh
%from strings.klh %import i_to_s, r_to_s, vec_to_s, b_to_s

%include draw.klh
%include draw.private.klh

--use for sorted line intersections with polygon
--..warning:: ** must update template if chaning 't_VERT_CLIP'
%class srtclp('arraysort.klc','arraysort.klh','sortintrsct.klt')

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

ROUTINE draw__vec_to_vec2d
  VAR
    v_trans : VECTOR
    v2 : VECTOR
  BEGIN
    --get vector relative to frame
    v_trans = INV((frame)):v
    --remove z componenet
    v2.x = v_trans.x ; v2.y = v_trans.y ; v2.z = 0 ;
    RETURN(v2)
  END draw__vec_to_vec2d
  
ROUTINE draw__vec2d_to_vec
  VAR
    v2 : VECTOR
  BEGIN
    v2.x = v.x ; v2.y = v.y ; v2.z = 0 ;
    v2 = frame:v2
    RETURN(v2)
  END draw__vec2d_to_vec

ROUTINE draw__vec2d_to_pos
  VAR
    v2 : VECTOR
    p : XYZWPR
  BEGIN
    v2.x = v.x ; v2.y = v.y ; v2.z = 0 ;
    v2 = frame:v2
    --add orientation
    p.w = frame.w; p.p = frame.p; p.r = frame.r;

    RETURN(p)
  END draw__vec2d_to_pos

ROUTINE draw__pos_to_vec2d
  VAR
    p_trans : XYZWPR
    v : VECTOR
  BEGIN
    --get vector relative to frame
    p_trans = INV((frame)):p
    --remove z componenet
    v.x = p_trans.x ; v.y = p_trans.y ; v.z = 0 ;
    RETURN(v)
  END draw__pos_to_vec2d


ROUTINE draw__perpendicular_vector
  VAR
    v_out: VECTOR
  BEGIN
    v_out = math__rotz_vec((v), 90)

    RETURN(v_out)
  END draw__perpendicular_vector

ROUTINE draw__angle_to_vector
  VAR
    v : VECTOR
  BEGIN
    v.x = COS(angle) ; v.y = SIN(angle) ; v.z = 0;
    RETURN(v)
  END draw__angle_to_vector

ROUTINE draw__vector_to_angle
  BEGIN
    RETURN(ATAN2(v.y, v.x) * 180/M_PI)
  END draw__vector_to_angle

ROUTINE draw__intersect
  VAR
    --line normals
    n_l1, n_l2 : VECTOR
    -- perpendicular line normals
    perp_l1, perp_l2 : VECTOR
    --Window Edge Coordinates
    --how far away a poitn is from a line
    -- +ive to left of line. -ive to right of line
    WEC1, WEC2 : ARRAY[2] OF REAL
    length : REAL
  BEGIN
    --create vector normals, and perpendicular normals
    --for both lines
    length = math__norm((l1.r1 - l1.r0))
    IF length = 0 THEN
      RETURN(FALSE)
    ENDIF
    n_l1 = (l1.r1 - l1.r0)/length
    perp_l1 = draw__perpendicular_vector(n_l1)

    length = math__norm((l2.r1 - l2.r0))
    IF length = 0 THEN
      RETURN(FALSE)
    ENDIF
    n_l2 = (l2.r1 - l2.r0)/length
    perp_l2 = draw__perpendicular_vector(n_l2)

    --for each endpoint determine which side of the opposing line
    --it is on. Using a lines (Q1Q2) perpendicular vector (Q2-Q1)⊥, 
    --and the dot product between a point's (P) vector with the line (PQ1).
    --The product will be negative to the right of the line (In the negative
    --half space of the line), or positive to the left of the line (In the 
    --positive half space of the line).
    -- (ref: https://math.stackexchange.com/questions/2945417/unknown-mathematical-symbols)

    --using l2 line (P-Q1)*(Q2-Q1)⊥
    WEC1[1] = (l1.r0 - l2.r0)@perp_l2
    WEC1[2] = (l1.r1 - l2.r0)@perp_l2

    --using l1 line (P-Q1)*(Q2-Q1)⊥
    WEC2[1] = (l2.r0 - l1.r0)@perp_l1
    WEC2[2] = (l2.r1 - l1.r0)@perp_l1

    --if endpoints are on opposite sides of the line (one +ive, one -ive), 
    --the line intersects with the other one.
    --..note:: WEC1[1]*WEC1[2] > 0.0001 addresses real rounding issue with
    --          epsilon values breaking comparative.
    IF (WEC1[1]*WEC1[2] > epsilon) OR (WEC2[1]*WEC2[2] > epsilon) THEN
      RETURN(FALSE)
    --denominator must be > 0. Account for rounding issues
    --avoids intersecting parallel lines
    ELSE IF (ABS(WEC1[1]-WEC1[2]) < epsilon) OR (ABS(WEC2[1]-WEC2[2]) < epsilon) THEN
      RETURN(FALSE)
    ELSE
      --ratios with WEC can be made to give a ratio for how for much of one
      --line lies to the left of another line. For clipping the line you
      --would want to remove the 1-alpha of the line if your polygon hull is
      --sequenced ccw.
      out_alpha1 = WEC1[1]/(WEC1[1]-WEC1[2])
      out_alpha2 = WEC2[1]/(WEC2[1]-WEC2[2])

      RETURN(TRUE)
    ENDIF
    ENDIF

    RETURN(FALSE)
  END draw__intersect

ROUTINE draw__psuedo_center
  VAR
    i : INTEGER
    center : VECTOR
  BEGIN
    center.x = 0 ; center.y = 0; center.z = 0;
    FOR i=1 TO PATH_LEN(verticies) DO
      center.x = center.x + verticies[i].coords.x
      center.y = center.y + verticies[i].coords.y
    ENDFOR
    center.x = center.x/PATH_LEN(verticies)
    center.y = center.y/PATH_LEN(verticies)

    RETURN(center)
  END draw__psuedo_center


-- private polygon routines

--comparator = TRUE : >, comparator = FALSE : <
ROUTINE glt(r1, r2 : REAL; comparator : BOOLEAN) : BOOLEAN
  BEGIN
    IF comparator THEN
      RETURN(r1 > r2)
    ELSE
      RETURN(r1 < r2)
    ENDIF
  END glt


ROUTINE minmax(point_arr : PATH nodedata = t_VERTEX; strti, endi : INTEGER ; &
               origin : VECTOR ; search_vec : VECTOR; comparator : BOOLEAN) : INTEGER
  VAR
   i : INTEGER
   minmax_idx : INTEGER
   valy, valx : REAL
   perp_vec : VECTOR
  BEGIN
    --get perpendicular vector
    perp_vec = draw__perpendicular_vector(search_vec)
%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'center:' + vec_to_s(origin, ','))
    usrdis__print(DEBUG,'pvec:' + vec_to_s(perp_vec, ','))
%endif
    --find y min
    minmax_idx = strti
    --dot product between (point-origin) and search vector
    --will give the point with the maximum distance from the
    --origin wrt the search vector
    valy = search_vec@(point_arr[strti].coords-origin)
    valx = perp_vec@(point_arr[strti].coords-origin)
    FOR i=strti TO endi DO

      IF (glt( search_vec@(point_arr[i].coords-origin), valy, comparator) ) THEN
        valy = search_vec@(point_arr[i].coords-origin)
        valx = perp_vec@(point_arr[i].coords-origin)
        minmax_idx = i
      ENDIF

      IF (search_vec@(point_arr[i].coords-origin) = valy) THEN
        IF (glt( perp_vec@(point_arr[i].coords-origin), valx, comparator) ) THEN
          valy = search_vec@(point_arr[i].coords-origin)
          valx = perp_vec@(point_arr[i].coords-origin)
          minmax_idx = i
        ENDIF
      ENDIF
    ENDFOR

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'index['+i_to_s(minmax_idx)+']: ' + vec_to_s((point_arr[minmax_idx].coords), ',') )
%endif

    RETURN(minmax_idx)

  END minmax

ROUTINE draw__find_min
  BEGIN
    RETURN( minmax(point_arr, strti, endi, center, search_vec, FALSE) )
  END draw__find_min

ROUTINE draw__find_max
  BEGIN
    RETURN( minmax(point_arr, strti, endi, center, search_vec, TRUE) )
  END draw__find_max

ROUTINE draw__on_hull
  VAR
    i : INTEGER
    b : BOOLEAN
  BEGIN
    b = FALSE
    FOR i=1 TO PATH_LEN(hull) DO
      IF (v = hull[i].coords) THEN
        b = TRUE
      ENDIF
    ENDFOR

    RETURN(b)
  END draw__on_hull

ROUTINE draw__turn_vertex
-- (ref: https://www.researchgate.net/publication/333009739_A_sequential_path-planning_methodology_for_wire_and_arc_additive_manufacturing_based_on_a_water-pouring_rule)
-- V_j = (PO@scan_dir)*(PQ@scan_dir)
-- When V_j > 0 point P is a turn vertex
-- if (PO@scan_dir) > 0 point P is an upturn vertex,
-- else it is a downturn vertex
-- When V_j = 0 at least one vector PO, PQ is
-- perpendicular to deposition direction
  VAR
    V_j, UD1, UD2 : REAL
    O,P,Q : INTEGER
    dummy : VECTOR
  BEGIN
    P = ((idx-1) MOD PATH_LEN(polygon)) + 1

    Q = ((idx-1+1) MOD PATH_LEN(polygon)) + 1
    IF (polygon[Q].polygon <> polygon[P].polygon) THEN
      IF NOT UNINIT(polygon[Q].prevPoly) THEN
        Q = polygon[Q].prevPoly
      ENDIF
    ENDIF

    -- get three adjacent points from the polygon
    O = ((idx-1-1) MOD PATH_LEN(polygon)) + 1
    --handle negative MOD
    IF O < 1 THEN
      IF NOT UNINIT(polygon[P].nextPoly) THEN
        O = polygon[P].nextPoly - 1
      ELSE
        O = PATH_LEN(polygon)
      ENDIF
    ELSE IF (polygon[O].polygon <> polygon[P].polygon) THEN
      O = polygon[P].nextPoly - 1
    ENDIF
    ENDIF
    
    UD1 = (polygon[O].coords-polygon[P].coords)@scan_dir
    UD2 = (polygon[Q].coords-polygon[P].coords)@scan_dir
    V_j = UD1*UD2

    IF V_j > 0 THEN
      IF (UD1 > 0) AND (UD2 > 0) THEN RETURN(VRT_UPTURN) ; ENDIF
      IF (UD1 < 0) AND (UD2 < 0) THEN RETURN(VRT_DOWNTURN) ; ENDIF
    ELSE
      IF V_j = 0 THEN RETURN(VRT_PERPEDGE) ; ENDIF
      IF (UD1 > 0) AND (UD2 < 0) THEN RETURN(VRT_SLOPENEG) ; ENDIF
      IF (UD1 < 0) AND (UD2 > 0) THEN RETURN(VRT_SLOPEPOS) ; ENDIF
    ENDIF

  END draw__turn_vertex

ROUTINE draw__point_collision_convex
  VAR
    i : INTEGER
    b : BOOLEAN
    cross : VECTOR
    sp, ep : INTEGER
  BEGIN
    --If looping from end of path to start of path
    IF end_node < start_node THEN
      end_node = end_node + PATH_LEN(polygon)
    ENDIF

    FOR i = (start_node+1) TO end_node DO
      --loop around path back to start
      sp = ((i-1-1) MOD PATH_LEN(polygon)) + 1
      ep = ((i-1) MOD PATH_LEN(polygon)) + 1
      cross = (polygon[ep].coords - polygon[sp].coords)#(v-polygon[sp].coords)
      --if determinate is negative it is to the right of the line
      --and is outside a convex polygon
      --if determinant is zero it is on the line. Discard as this point
      --will be incuded as an intersection
      IF on_boundary THEN
        IF cross.z < epsilon THEN
          RETURN(FALSE)
        ENDIF
      ELSE
        IF cross.z < 0 THEN
          RETURN(FALSE)
        ENDIF
      ENDIF
    ENDFOR

    IF polygon[start_node].coords <> polygon[end_node].coords THEN
      --last line
      sp = end_node
      ep = start_node
      cross = (polygon[ep].coords - polygon[sp].coords)#(v-polygon[sp].coords)
      IF on_boundary THEN
        IF cross.z < epsilon THEN
          RETURN(FALSE)
        ENDIF
      ELSE
        IF cross.z < 0 THEN
          RETURN(FALSE)
        ENDIF
      ENDIF
    ENDIF

    RETURN(TRUE)
  END draw__point_collision_convex

ROUTINE draw__point_avoid_convex
  VAR
    i : INTEGER
    b : BOOLEAN
    cross : VECTOR
    sp, ep : INTEGER
  BEGIN
    --If looping from end of path to start of path
    IF end_node < start_node THEN
      end_node = ((end_node + PATH_LEN(polygon)-1) MOD PATH_LEN(polygon)) + 1
    ENDIF

    FOR i = (start_node+1) TO end_node DO
      --loop around path back to start
      sp = ((i-1-1) MOD PATH_LEN(polygon)) + 1
      ep = ((i-1) MOD PATH_LEN(polygon)) + 1
      cross = (polygon[ep].coords - polygon[sp].coords)#(v-polygon[sp].coords)
      --if determinate is positive it is to the left of the line
      --and inside a convex polygon
      IF cross.z > 0 THEN
        RETURN(FALSE)
      ENDIF
    ENDFOR

  IF polygon[start_node].coords <> polygon[end_node].coords THEN
    --last line
    sp = end_node
    ep = start_node
    cross = (polygon[ep].coords - polygon[sp].coords)#(v-polygon[sp].coords)
    IF cross.z > 0 THEN
      RETURN(FALSE)
    ENDIF
  ENDIF

    RETURN(TRUE)
  END draw__point_avoid_convex

ROUTINE draw__point_collision_polygon
  VAR
    i, j : INTEGER
    status : INTEGER
    b : BOOLEAN
    reflex_start, reflex_end : INTEGER
  BEGIN
    --assume polygon verticies are ordered counterclockwise
    --If point is to the left of all lines on the polygon
    --point might be in the polygon
    b = draw__point_collision_convex(v, polygon, 1, PATH_LEN(polygon), TRUE)
    --if point is to the left of all lines it is in the polygon
    IF b = TRUE THEN
      RETURN(TRUE)
    ENDIF


    --check the convex hull to see if it is outside of the hull
    b = draw__point_collision_convex(v, hull, 1, PATH_LEN(hull), TRUE)
    --if point is to the right of any lines on the hull it is
    --outside of the polygon
    IF NOT b THEN
      RETURN(FALSE)
    ENDIF

    --check for reflexive verticies
    --clear reflex list
    j = PATH_LEN(reflex_verts)
    WHILE PATH_LEN(reflex_verts) > 0 DO
		  DELETE_NODE(reflex_verts,j,status)
      CHK_STAT(status)
      j = j - 1
	  ENDWHILE

    j = 0
    FOR i = 1 TO PATH_LEN(polygon) DO
      IF NOT draw__on_hull(polygon[i].coords, hull) THEN
        j = j + 1
        APPEND_NODE(reflex_verts, status)
        reflex_verts[j].v = i
      ENDIF
    ENDFOR

    --if any reflexive points, draw a polygon
    --around these reflexive points. see
    --if point is inside this area
    IF j > 0 THEN
      --start and end polygons are points on the hull
      --before and after the reflexive points
      --mod operator does not handle negatives
      IF reflex_verts[1].v = 1 THEN
        reflex_start = PATH_LEN(polygon)
      ELSE
        reflex_start = ((reflex_verts[1].v-1-1) MOD PATH_LEN(polygon)) + 1
      ENDIF

      FOR i=1 TO j-1 DO
        --if next vertex is not reflexive, we have reached the hull
        IF (reflex_verts[i].v <> reflex_verts[i+1].v-1) THEN
          reflex_end = ((reflex_verts[i].v+1-1) MOD PATH_LEN(polygon)) + 1
          
          --test poly
          b = draw__point_avoid_convex(v, polygon, reflex_start, reflex_end)
          -- if found inside these interior regions it is not in the polygon
          IF b THEN
            RETURN(FALSE)
          ENDIF

          reflex_start = ((reflex_verts[i+1].v-1-1) MOD PATH_LEN(polygon)) + 1
        ENDIF
      ENDFOR

      --free memory
      j = PATH_LEN(reflex_verts)
      WHILE PATH_LEN(reflex_verts) > 0 DO
        DELETE_NODE(reflex_verts,j,status)
        CHK_STAT(status)
        j = j - 1
      ENDWHILE
    ENDIF

    RETURN(TRUE)

  END draw__point_collision_polygon


-- public polygon routines
ROUTINE draw__convex_hull
-- (ref : https://www.geeksforgeeks.org/convex-hull-set-1-jarviss-algorithm-or-wrapping/)
-- (ref : https://www.topcoder.com/community/competitive-programming/tutorials/geometry-concepts-line-intersection-and-its-applications#convexhull)
  VAR
   i : INTEGER
   min_hull : INTEGER
   curr, nxt, tst : INTEGER
   cross : VECTOR
   dot : REAL
   det : REAL
   status : INTEGER
  BEGIN
    --clear hull
    i = PATH_LEN(out_hull)
    WHILE PATH_LEN(out_hull) > 0 DO
		  DELETE_NODE(out_hull,i,status)
      i = i - 1
	  ENDWHILE

    --find y min
    min_hull = draw__find_min(verticies, 1, PATH_LEN(verticies), draw__psuedo_center(verticies), VEC2D(1,0))
    --min point must be on hull
    curr = min_hull
%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'min pnt:' + i_to_s(min_hull))
%endif

    --skip first point as we know it is min_hull
    -- and will be the last found hull point

%ifdef DEBUG_BUILD
    usrdis__print(INFO,'starting convex hull')
%endif

    REPEAT
      -- reset tentative hull point
      nxt = -1

      FOR i=1 TO PATH_LEN(verticies) DO
        -- continuous loop from 1..path_len
        tst = ((curr+i-1) MOD PATH_LEN(verticies)) + 1
        -- cross product will determine the furthest point
        -- from the line nxt->curr.

        --Do not test if in hull set. But abort out 
        IF (tst <> curr) AND NOT draw__on_hull(verticies[tst].coords, out_hull) THEN
          IF (nxt = -1) THEN
            nxt = ((curr+i-1) MOD PATH_LEN(verticies)) + 1
          ENDIF

          cross = (verticies[curr].coords-verticies[nxt].coords)#(verticies[tst].coords-verticies[nxt].coords)
          det = cross.z

          --det = 0, nxt and tst are colinear
          IF rmv_colinear THEN
            IF (det = 0) THEN
              --points are on the same line select the one furthest
              --away
              dot = (verticies[curr].coords-verticies[nxt].coords)@(verticies[tst].coords-verticies[nxt].coords)
              -- if dot product is negative tst is further away
              IF (dot < 0) THEN
                nxt = tst
              ENDIF
            ENDIF
          ELSE
            IF (det = 0) THEN
              --points are on the same line select the one furthest
              --away
              dot = (verticies[curr].coords-verticies[nxt].coords)@(verticies[tst].coords-verticies[nxt].coords)
              -- if dot product is positive tst is closer
              IF (dot > 0) AND (tst <> min_hull) THEN
                nxt = tst
              ENDIF
            ENDIF
          ENDIF

          IF det > 0 THEN
%ifdef DEBUG_BUILD
            usrdis__print(DEBUG,'idx:' + i_to_s(tst) + ' det:' + r_to_s(det))
%endif
            nxt = tst
          ENDIF
        ENDIF
      ENDFOR
      -- add point furthest counter clockwise from current point to hull
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'hull pnt:' + i_to_s(nxt))
%endif
      curr = nxt

      APPEND_NODE(out_hull,status)
      out_hull[PATH_LEN(out_hull)].coords = verticies[nxt].coords

    UNTIL(curr = min_hull)

    --add min_hull to the start of the list
    INSERT_NODE(out_hull,1,status)
    CHK_STAT(status)
    out_hull[1].coords =  verticies[nxt].coords

  END draw__convex_hull


ROUTINE draw__bounding_box
  VAR
    edges : ARRAY[4] OF VECTOR
    box : t_RECT
    align_vec, perp_vec : VECTOR
    center : VECTOR
    frm : XYZWPR
    i : INTEGER
  BEGIN
    --y-axis vector
    align_vec = draw__angle_to_vector(angle + 90)
    --x-axis vector
    perp_vec = draw__angle_to_vector(angle)

    --approximated center
    center = draw__psuedo_center(verticies)

    --find four corners
    --y
    edges[1] = verticies[draw__find_min(verticies, 1, PATH_LEN(verticies), center, align_vec )].coords
    edges[2] = verticies[draw__find_max(verticies, 1, PATH_LEN(verticies), center, align_vec )].coords
    --x
    edges[3] = verticies[draw__find_min(verticies, 1, PATH_LEN(verticies), center, perp_vec )].coords
    edges[4] = verticies[draw__find_max(verticies, 1, PATH_LEN(verticies), center, perp_vec )].coords

    --put edges in rotated frame
    frm.x = 0; frm.y = 0; frm.z = 0; frm.w = 0; frm.p = 0; frm.r = angle ;
    FOR i=1 TO ARRAY_LEN(edges) DO
      edges[i] = INV((frm)):edges[i]
    ENDFOR

    box.verts[1] = frm:(VEC2D(edges[3].x, edges[1].y))
    box.verts[2] = frm:(VEC2D(edges[4].x, edges[1].y))
    box.verts[3] = frm:(VEC2D(edges[4].x, edges[2].y))
    box.verts[4] = frm:(VEC2D(edges[3].x, edges[2].y))

    box.vec[1] = align_vec
    box.vec[2] = perp_vec
    box.center = math__average_vector(box.verts)

    RETURN(box)

  END draw__bounding_box


ROUTINE draw__clip_lines
  VAR
    line1_alpha, line2_alpha : REAL
    intersect : BOOLEAN
  BEGIN
    intersect = draw__intersect(line1, line2, line1_alpha, line2_alpha)
    IF intersect THEN
      --clip lines
      line1.r1 = (1-line1_alpha)*line1.r0 + line1_alpha*line1.r1
      line2.r0 = (1-line2_alpha)*line2.r0 + line2_alpha*line2.r1
    ENDIF

  END draw__clip_lines


ROUTINE draw__clip_poly_verts
  VAR
    i,j,k : INTEGER
    curr_vert, next_vert : INTEGER
    frst_vert : t_VERTEX
    poly_seg : t_SEGMENT2D
    line_alpha, poly_alpha : REAL
    intersect : BOOLEAN
    collision : BOOLEAN
  BEGIN
    --clipped vertex index
    j = 0
    --is the start point of line inside or outside polygon
    --assume polygon verticies are ordered counterclockwise
    collision = draw__point_collision_polygon(line.r0, polygon, hull)

    --If inside the polygon add to vertex list
    IF collision THEN
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG, 'polygon collision at: ' + vec_to_s(line.r0,','))
%endif

      j = j + 1
      out_verts[j].coords = line.r0
      out_verts[j].alpha = 0
      out_verts[j].intersect = FALSE
      out_verts[j].poly_idx = 0
    ENDIF

    --start at min vertex in polygon relative to clip line
    --min_i = draw__find_min(polygon, (line.r1-line.r0)/math__norm(line.r1-line.r0))
    frst_vert.polygon = 0
    FOR i=1 TO PATH_LEN(polygon) DO
      --increment loop
      --i
      curr_vert = ((i-1) MOD PATH_LEN(polygon)) + 1
      IF UNINIT(polygon[curr_vert].polygon) THEN polygon[curr_vert].polygon = 1 ; ENDIF
      --i+1
      next_vert = ((i+1-1) MOD PATH_LEN(polygon)) + 1
      IF UNINIT(polygon[next_vert].polygon) THEN polygon[next_vert].polygon = 1 ; ENDIF

      IF polygon[curr_vert].polygon <> polygon[next_vert].polygon THEN
        --intersect between last vert and first vert in poly
        poly_seg.r0 = polygon[curr_vert].coords
        poly_seg.r1 = frst_vert.coords
        --find intersection
        --intersection is read from left of the subject line to the right
        intersect = draw__intersect(line, poly_seg, line_alpha, poly_alpha)
        IF intersect THEN
          j = j + 1
          --coordinates of intersection point
          out_verts[j].coords = (1-line_alpha)*line.r0 + line_alpha*line.r1
          out_verts[j].alpha = line_alpha
          out_verts[j].intersect = intersect
          out_verts[j].polygon = polygon[curr_vert].polygon
          out_verts[j].poly_idx = curr_vert
%ifdef DEBUG_BUILD
          usrdis__print(DEBUG,'clip['+ i_to_s(j) +']: ' + vec_to_s(out_verts[j].coords, ','))
          usrdis__print(DEBUG, 'alpha = ' + r_to_s(out_verts[j].alpha))
          usrdis__print(DEBUG,'seg_nxt: r0[' + vec_to_s(poly_seg.r0, ',') + '] r1[' + vec_to_s(poly_seg.r1, ',') + ']')
%endif
        ENDIF
      ELSE  --curr_vert.polygon = next_vert.polygon
          poly_seg.r0 = polygon[curr_vert].coords
          poly_seg.r1 = polygon[next_vert].coords
          --find intersection
          --intersection is read from left of the subject line to the right
          intersect = draw__intersect(line, poly_seg, line_alpha, poly_alpha)
          IF intersect THEN
            j = j + 1
            --coordinates of intersection point
            out_verts[j].coords = (1-line_alpha)*line.r0 + line_alpha*line.r1
            out_verts[j].alpha = line_alpha
            out_verts[j].intersect = intersect
            out_verts[j].polygon = polygon[curr_vert].polygon
            out_verts[j].poly_idx = curr_vert
%ifdef DEBUG_BUILD
            usrdis__print(DEBUG,'clip['+ i_to_s(j) +']: ' + vec_to_s(out_verts[j].coords, ','))
            usrdis__print(DEBUG, 'alpha = ' + r_to_s(out_verts[j].alpha))
            usrdis__print(DEBUG,'seg: r0[' + vec_to_s(poly_seg.r0, ',') + '] r1[' + vec_to_s(poly_seg.r1, ',') + ']')
%endif
          ENDIF
      ENDIF
      
      IF polygon[curr_vert].polygon <> frst_vert.polygon THEN
        --update polygon count and first vert for next polygon
        frst_vert = polygon[curr_vert]
%ifdef DEBUG_BUILD
        usrdis__print(DEBUG,'Finding intersections for polygon ' + i_to_s((polygon[curr_vert].polygon)))
        usrdis__print(DEBUG,'First vertex: ' + vec_to_s(frst_vert.coords, ','))
%endif
      ENDIF
    ENDFOR

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'total clips: ' + i_to_s(j))
%endif

    --fill polygon info of first point if it is a collision not a clip
    IF UNINIT(out_verts[1].polygon) THEN
      IF j > 1 THEN
        out_verts[1].polygon = out_verts[2].polygon
      ELSE
        out_verts[1].polygon = 1
      ENDIF
    ENDIF

    -- if an odd number of clips are found
    -- line end point is inside of polygon
    -- add 1 to get correct number of endpoints
    IF ((j MOD 2) > 0) THEN
      --check if endpoint of the line is inside the polygon
      collision = draw__point_collision_polygon(line.r1, polygon, hull)
      IF collision THEN
%ifdef DEBUG_BUILD
        usrdis__print(DEBUG, 'polygon collision at: ' + vec_to_s(line.r1,',') )
%endif
        j = j + 1
        out_verts[j].coords = line.r1
        out_verts[j].alpha = 0
        out_verts[j].intersect = FALSE
        out_verts[j].polygon = out_verts[j-1].polygon
        out_verts[j].poly_idx = 0
      ENDIF
    ENDIF

    RETURN(j)

END draw__clip_poly_verts

ROUTINE draw__clips_to_lines
  VAR
    i : INTEGER
    status : INTEGER
    prev, nxt : INTEGER
    det : VECTOR
    mid : VECTOR
    entryexit : BOOLEAN
    dup : BOOLEAN
    first : BOOLEAN
    opn : BOOLEAN
  BEGIN
    --sort points by alpha value
    srtclp__bubblesort(clips, start_i, end_i, TRUE)

    --remove duplicates
    end_i = srtclp__keep_unique(clips, start_i, end_i)

    i=start_i
    REPEAT

      --if duplicate clip points
      IF NOT UNINIT(clips[i+1].coords) THEN
        
        IF (ABS(clips[i+1].alpha - clips[i].alpha) > epsilon) THEN
          IF on_boundary THEN
            APPEND_NODE(out_lines, status)
            out_lines[PATH_LEN(out_lines)].r0 = clips[i].coords
            out_lines[PATH_LEN(out_lines)].r1 = clips[i + 1].coords
            out_lines[PATH_LEN(out_lines)].polygon = clips[i].polygon
            out_lines[PATH_LEN(out_lines)].tangent = ((clips[i + 1].coords - clips[i].coords)/math__norm(clips[i + 1].coords - clips[i].coords))
          ELSE
            mid = 0.5*(clips[i].coords + clips[i+1].coords)
            IF draw__point_collision_polygon(mid, polygon, hull) THEN 
              APPEND_NODE(out_lines, status)
              out_lines[PATH_LEN(out_lines)].r0 = clips[i].coords
              out_lines[PATH_LEN(out_lines)].r1 = clips[i + 1].coords
              out_lines[PATH_LEN(out_lines)].polygon = clips[i].polygon
              out_lines[PATH_LEN(out_lines)].tangent = ((clips[i + 1].coords - clips[i].coords)/math__norm(clips[i + 1].coords - clips[i].coords))
            ENDIF 
          ENDIF
        ENDIF
      ENDIF
      
      i = i + 2
    UNTIL(i > (end_i-1))

    -- (ABS(clips[i].alpha - clips[i-1].alpha) > epsilon)

  END draw__clips_to_lines

ROUTINE draw__clip_line_with_poly
  VAR
    --assumed maximum number of times a polygon will
    --intersect a single line
%define total_clips 20
    clippedverts : ARRAY[total_clips] OF t_VERT_CLIP
    no_of_clips : INTEGER
  BEGIN
    no_of_clips = draw__clip_poly_verts(line, polygon, hull, clippedverts)
    --if any intersection are found
    IF no_of_clips > 0 THEN
      draw__clips_to_lines(clippedverts, 1, no_of_clips, polygon, hull, on_boundary, out_lines)
    ENDIF
    --return out_lines

    RETURN(TRUNC(no_of_clips/2))
  END draw__clip_line_with_poly

ROUTINE draw__raster_lines
  VAR
    bbox : t_RECT
    new_line : t_SEGMENT2D
    startpoint, endpoint : VECTOR
    line_count : INTEGER
    i : INTEGER
    inc : INTEGER
    status : INTEGER
  BEGIN
%ifdef DEBUG_BUILD
    usrdis__print(INFO,'starting raster')
%endif

    --draw convex hull around polygon
    draw__convex_hull(polygon, FALSE, out_hull)
    --define a bounding box around polygon and fill with line segments
    bbox = draw__bounding_box(polygon, raster_angle)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'bounding box:' + vec_to_s(bbox.verts[1], ','))
    usrdis__print(DEBUG, vec_to_s(bbox.verts[2], ','))
    usrdis__print(DEBUG, vec_to_s(bbox.verts[3], ','))
    usrdis__print(DEBUG, vec_to_s(bbox.verts[4], ','))
%endif
    -- --determine vertex types for verticies in polygon
    -- FOR i=1 TO PATH_LEN(polygon) DO
    --   polygon[i].typ = draw__turn_vertex(polygon, i, bbox.vec[1])
    -- ENDFOR

    --define how many lines will be made based on height of box
    --and line pitch
    -- no_of_lines = ceil((box_height-line_width)/pitch)
    inc = math__ceil((math__norm(bbox.verts[4]-bbox.verts[1])-line_width)/line_pitch)

    --all boundaries are assumed to be ordered counterclockwise
    IF dir = 1 THEN
      startpoint = bbox.vec[1]*(line_width/2) + bbox.verts[1]
      endpoint = bbox.vec[1]*(line_width/2) + bbox.verts[2]
    ELSE
      startpoint = bbox.vec[1]*(line_width/2) + bbox.verts[2]
      endpoint = bbox.vec[1]*(line_width/2) + bbox.verts[1]
    ENDIF

    --repeat until clipping stops producing lines
    i = 0
    REPEAT
      new_line.r0 = bbox.vec[1]*line_pitch*(i) + startpoint
      new_line.r1 = bbox.vec[1]*line_pitch*(i) + endpoint

%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'clipping line[' + i_to_s(i) + ']:' + vec_to_s(new_line.r0, ',') + ',')
      usrdis__print(DEBUG, vec_to_s(new_line.r1, ','))
%endif
      --clip lines to polygon
      line_count = draw__clip_line_with_poly(new_line, polygon, out_hull, on_boundary, out_lines)

      i = i + 1
    UNTIL(i > inc)

    --return out_lines

  END draw__raster_lines

ROUTINE draw__line_inset
  VAR
    line1_alpha, line2_alpha : REAL
    line_vec1, line_vec2 : VECTOR
    intersect : BOOLEAN
    length : REAL
  BEGIN
    --get line vector
    length = math__norm(line1.r1-line1.r0)
    IF length > 0 THEN
      line_vec1 = (line1.r1-line1.r0)/length
    ELSE
      line_vec1 = (line1.r1-line1.r0)
    ENDIF
    --inset lines based on perpendicular vector
    out_line1.r0 = draw__perpendicular_vector(line_vec1)*inset_amount + line1.r0
    out_line1.r1 = draw__perpendicular_vector(line_vec1)*inset_amount + line1.r1

    --get line vector
    length = math__norm(line2.r1-line2.r0)
    IF length > 0 THEN
      line_vec2 = (line2.r1-line2.r0)/length
    ELSE
      line_vec2 = (line2.r1-line2.r0)
    ENDIF
    --inset lines based on perpendicular vector
    out_line2.r0 = draw__perpendicular_vector(line_vec2)*inset_amount + line2.r0
    out_line2.r1 = draw__perpendicular_vector(line_vec2)*inset_amount + line2.r1

    --clip line with previous line
    intersect = draw__intersect(out_line1, out_line2, line1_alpha, line2_alpha)
    IF intersect THEN
      out_line1.r1 = (1-line1_alpha)*out_line1.r0 + line1_alpha*out_line1.r1
      out_line2.r0 = (1-line2_alpha)*out_line2.r0 + line2_alpha*out_line2.r1
    ELSE
      --concave lines may not intersect. Increase r1 of the previous line,
      --and r0 of the current line to see if they clip.
      out_line1.r1 = line_vec1*inset_amount + out_line1.r1
      out_line2.r0 =  out_line2.r0 - line_vec2*inset_amount
      intersect = draw__intersect(out_line1, out_line2, line1_alpha, line2_alpha)
      IF intersect THEN
        out_line1.r1 = (1-line1_alpha)*out_line1.r0 + line1_alpha*out_line1.r1
        out_line2.r0 = (1-line2_alpha)*out_line2.r0 + line2_alpha*out_line2.r1
      ENDIF
    ENDIF
  END draw__line_inset

ROUTINE add_inset(point : VECTOR; poly_no : INTEGER; inset_amount : REAL; & 
                  hull : PATH nodedata = t_VERTEX; out_polygon : PATH nodedata = t_VERTEX)
  VAR
    inflex_pnt : BOOLEAN
    status : INTEGER
  BEGIN
    --test that point did not infex
    IF inset_amount < 0 THEN
      inflex_pnt = draw__point_avoid_convex(point, hull, 1, PATH_LEN(hull) )
    ELSE
      inflex_pnt = draw__point_collision_convex(point, hull, 1, PATH_LEN(hull), FALSE)
    ENDIF

    --add intersection point to new polygon
    IF inflex_pnt THEN
      APPEND_NODE(out_polygon, status)
      out_polygon[PATH_LEN(out_polygon)].coords = point
      out_polygon[PATH_LEN(out_polygon)].polygon = poly_no
    ENDIF
  END add_inset

ROUTINE draw__inset_polygon
  VAR
    i, j : INTEGER
    poly_count, first_vert : INTEGER
    next_vert, curr_vert : t_VERTEX
    new_line, prev_line : t_SEGMENT2D
    new_inset, prev_inset : t_SEGMENT2D
    uninit_line : t_SEGMENT2D
    status : INTEGER
  BEGIN
    --check output polygon for verticies
    --get polygon count
    IF PATH_LEN(out_polygon) > 0 THEN
      IF NOT UNINIT(out_polygon[PATH_LEN(out_polygon)].polygon) THEN
        poly_count = out_polygon[PATH_LEN(out_polygon)].polygon + 1
      ENDIF
    ENDIF

    --draw convex hull around polygon
    draw__convex_hull(polygon, FALSE, out_hull)

    IF UNINIT(poly_count) OR (poly_count = 0) THEN
      poly_count = 1
    ENDIF

    first_vert = 1
    FOR i=1 TO PATH_LEN(polygon) + 1 DO
      --curent vert = i
      curr_vert = polygon[((i-1) MOD PATH_LEN(polygon)) + 1]
      IF UNINIT(curr_vert.polygon) THEN curr_vert.polygon = 1 ; ENDIF
      --next vert = i+1
      next_vert = polygon[((i+1-1) MOD PATH_LEN(polygon)) + 1]
      IF UNINIT(next_vert.polygon) THEN next_vert.polygon = 1 ; ENDIF

      --next line
      new_line.r0 = curr_vert.coords ; new_line.r1 = next_vert.coords ;
      
      IF NOT UNINIT(prev_line.r0) THEN

        IF (curr_vert.polygon <> next_vert.polygon) OR (i = PATH_LEN(polygon)) THEN
          --evaluate line between first and last index of polygon
          next_vert = polygon[first_vert]

          --next line
          new_line.r0 = curr_vert.coords ; new_line.r1 = next_vert.coords ;

          --find intersection of inset lines
          draw__line_inset(prev_line, new_line, inset_amount, prev_inset, new_inset)

          -- add inset vertex
          add_inset(prev_inset.r1, poly_count, inset_amount, out_hull, out_polygon)

          prev_line = new_line

          --close polygon, on the first vertex
          curr_vert = polygon[first_vert]
          next_vert = polygon[((first_vert+1-1) MOD PATH_LEN(polygon)) + 1]

          --next line
          new_line.r0 = curr_vert.coords ; new_line.r1 = next_vert.coords ;

          --find intersection of inset lines
          draw__line_inset(prev_line, new_line, inset_amount, prev_inset, new_inset)

          -- add inset vertex
          add_inset(prev_inset.r1, poly_count, inset_amount, out_hull, out_polygon)

          --uninitialize prev_line
          prev_line = uninit_line

          --fill 'nextpoly' member for all verticies in new polygon
          FOR j=i DOWNTO first_vert DO
            IF i+1 < PATH_LEN(polygon) THEN out_polygon[j].nextpoly = i+1 ; ENDIF
            IF first_vert > 1 THEN out_polygon[j].prevpoly = first_vert - 1 ; ENDIF
          ENDFOR

          --update pointer for first vertex of the next polygon
          first_vert = ((i+1-1) MOD PATH_LEN(polygon)) + 1

          poly_count = poly_count + 1
        ELSE
          --find intersection of inset lines
          draw__line_inset(prev_line, new_line, inset_amount, prev_inset, new_inset)

          -- add inset vertex
          add_inset(prev_inset.r1, poly_count, inset_amount, out_hull, out_polygon)

          prev_line = new_line

        ENDIF
      ELSE
        prev_line = new_line
      ENDIF
    ENDFOR
  END draw__inset_polygon

ROUTINE draw__trace
  VAR
    i : INTEGER
    align_vec : VECTOR
    min_hull : INTEGER
    vert : INTEGER
    strt, endi : INTEGER
    status : INTEGER
    center : VECTOR
  BEGIN
%ifdef DEBUG_BUILD
    usrdis__print(INFO,'start trace')
%endif
    --determine if multiple polygons exist
    IF (UNINIT(polygon[1].polygon)) OR (UNINIT(polygon[PATH_LEN(polygon)].polygon)) THEN
      strt = 1 ; endi = PATH_LEN(polygon)
    ELSE
      IF (polygon[1].polygon <> polygon[PATH_LEN(polygon)].polygon) THEN
        --get first poly. Assumes polygon is in sequential order, with the
        --polygon starting at a lower index
        strt = 1 ; endi = polygon[1].nextPoly-1
      ELSE
        strt = 1 ; endi = PATH_LEN(polygon)
      ENDIF
    ENDIF

    --y-axis vector
    align_vec = draw__angle_to_vector(start_angle + 90)

    --approx center
    center = draw__psuedo_center(polygon)

    --go to every node in list
    REPEAT
      --get starting point for polygon
      min_hull = draw__find_min(polygon, strt, endi, center, align_vec)

%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'min pnt:' + i_to_s(min_hull))
%endif
      --loop through polygon and add to contour list
      FOR i=0 TO (endi-strt) DO
        --wheel increment between strt and endi
        vert = ((min_hull+i*dir-1) MOD (endi-strt+1))
        -- mod operator includes negatives. must handle these
        -- cases
        IF vert < 0 THEN
          vert = (endi-strt+1) + vert
        ENDIF
        vert = (strt-1) + vert + 1

        IF UNINIT(polygon[vert].polygon) THEN
          polygon[vert].polygon = 1
        ENDIF
        
%ifdef DEBUG_BUILD
        usrdis__print(DEBUG,'vert:' + i_to_s(vert) + ' poly:' + i_to_s((polygon[vert].polygon)) )
%endif
        IF (i = 0) THEN
            --start contour
            APPEND_NODE(out_contour, status)
            out_contour[PATH_LEN(out_contour)].v = polygon[vert].coords
            out_contour[PATH_LEN(out_contour)].code = PTH_MOVETO
            out_contour[PATH_LEN(out_contour)].polygon = polygon[vert].polygon
        ELSE IF i = (endi-strt) THEN
            APPEND_NODE(out_contour, status)
            out_contour[PATH_LEN(out_contour)].v = polygon[vert].coords
            out_contour[PATH_LEN(out_contour)].code = curve_type
            out_contour[PATH_LEN(out_contour)].polygon = polygon[vert].polygon

            APPEND_NODE(out_contour, status)
            out_contour[PATH_LEN(out_contour)].v = polygon[min_hull].coords
            out_contour[PATH_LEN(out_contour)].code = PTH_CLOSE
            out_contour[PATH_LEN(out_contour)].polygon = polygon[min_hull].polygon
        ELSE
            APPEND_NODE(out_contour, status)
            out_contour[PATH_LEN(out_contour)].v = polygon[vert].coords
            out_contour[PATH_LEN(out_contour)].code = curve_type
            out_contour[PATH_LEN(out_contour)].polygon = polygon[vert].polygon
        ENDIF
        ENDIF
      ENDFOR

      --update start and end indicies
      IF (NOT UNINIT(polygon[vert].nextPoly)) THEN
        strt = polygon[vert].nextPoly
        IF UNINIT(polygon[strt].nextPoly) THEN
          endi = PATH_LEN(polygon)
        ELSE
          endi = polygon[strt].nextPoly - 1
        ENDIF
      ENDIF

    UNTIL( UNINIT(polygon[vert].nextPoly) )

    --close off polygon and stop path
    out_contour[PATH_LEN(out_contour)].code = PTH_CLOSE

  END draw__trace

ROUTINE draw__calc_tangent
  VAR
    i : INTEGER
    n : REAL
  BEGIN
    FOR i=1 TO PATH_LEN(pth) DO
      SELECT pth[i].code OF
        CASE(PTH_MOVETO):
          n = math__norm((pth[i+1].v-pth[i].v))
          IF n > 0 THEN
            pth[i].tangent = (pth[i+1].v-pth[i].v)/n
          ELSE
            pth[i].tangent = pth[i].tangent
          ENDIF
        CASE(PTH_CLOSE):
          n = math__norm((pth[i].v-pth[i-1].v))
          IF n > 0 THEN
            pth[i].tangent = (pth[i].v-pth[i-1].v)/math__norm((pth[i].v-pth[i-1].v))
          ELSE
            pth[i].tangent = pth[i-1].tangent
          ENDIF
        ELSE:
          n = math__norm((pth[i+1].v-pth[i].v))
          IF n > 0 THEN
            pth[i].tangent = (pth[i+1].v-pth[i].v)/n
          ELSE
            pth[i].tangent = pth[i].tangent
          ENDIF
      ENDSELECT
    ENDFOR
  END draw__calc_tangent

ROUTINE draw__calc_tangent_segment
  VAR
    i : INTEGER
    n : REAL
  BEGIN
    FOR i=1 TO PATH_LEN(segment) DO
      IF i = PATH_LEN(segment) THEN
        n = math__norm((segment[i].v-segment[i-1].v))
        IF n > 0 THEN
          segment[i].tangent = (segment[i].v-segment[i-1].v)/n
        ELSE
          segment[i].tangent = segment[i-1].tangent
        ENDIF
      ELSE
        n = math__norm((segment[i+1].v-segment[i].v))
        IF n > 0 THEN
          segment[i].tangent = (segment[i+1].v-segment[i].v)/n
        ELSE
          segment[i].tangent = segment[i-1].tangent
        ENDIF
      ENDIF
    ENDFOR
  END draw__calc_tangent_segment

ROUTINE draw_hexagon
  VAR 
    i, pthlen : INTEGER
    status : INTEGER
    ang : REAL
    p : XYZWPR
    trans : VECTOR
    vert : VECTOR
    poly_count : INTEGER
  BEGIN
    --get current length of path
    pthlen = PATH_LEN(out_poly)
    IF (pthlen = 0) OR UNINIT(pthlen) THEN
      pthlen = 1
      poly_count = 1
    ELSE
      IF NOT (UNINIT(out_poly[pthlen].polygon)) THEN
        poly_count = out_poly[pthlen].polygon + 1
        i = pthlen
        WHILE((i >= 1) OR UNINIT(out_poly[i].nextpoly)) DO
          out_poly[i].nextpoly = poly_count - 1
          i = i - 1
        ENDWHILE
      ELSE
        poly_count = 1
      ENDIF
    ENDIF

    --make radius vector
    trans.x = 0 ; trans.y = radius ; trans.z = 0 ;

    FOR i=0 TO (verticies-1) DO
      ang = (i*2*M_PI/verticies)*M_RAD2DEG
      p = math__rotz(math__translate(math__rotz((origin), ang), trans), -ang)
      vert.x = p.x ; vert.y = p.y ; vert.z = p.z ;

      APPEND_NODE(out_poly, status)
      out_poly[pthlen].coords = vert
      out_poly[pthlen].polygon = poly_count
      --increment path length as it may not be tha same as i+1
      pthlen = pthlen + 1
    ENDFOR
  END draw_hexagon

BEGIN
END draw

